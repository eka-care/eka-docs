openapi: 3.1.0
info:
  title: Webhook Service for the Clients
  description: |
    The Webhook Service allows clients to register webhooks that are triggered based on specific events. Each webhook is associated with a business_id, client_id, url, and a scope. The scope defines the type of events that will trigger the webhook.
  version: 1.0.0
servers:
  - url: https://api.eka.care
components:
  securitySchemes:
    auth:
      type: apiKey
      in: header
      name: auth
      description: |
        The API requires the following auth in headers for authentication.
  schemas:
    RegisterWebhookRequest:
      type: object
      properties:
        scope:
          type: string
          description: |
            Specifies the type of events that will trigger the webhook.
            - "all": Trigger on all events.
            - "appointment.*": Trigger on appointment-related events.
            - "prescription.*": Trigger on appointment-related events.
          example: "appointment"
        endpoint:
          type: string
          description: |
            The fully qualified URL where the webhook will send POST requests.
            The URL must be reachable by the webhook service.
          example: "https://example.com/webhook"
        signing_key:
          type: string
          description: |
            A secret key provided by the client for verifying the authenticity of webhook payloads.
            It should be a securely generated, random string.
          example: "supersecretkey"
        client_id:
          type: string
          description: |
            Identifier unique to the client, used only for cases involving `hub.eka.care`.
          example: "client_12345"
        protocol:
          type: string
          description: |
            Specifies the protocol or delivery mechanism used for the webhook.
            - "http": Plain HTTP endpoint.
            - "https": Secure HTTPS endpoint.
            - "SQS endpoint": AWS SQS queue URL for message delivery.
            - "Lambda function": AWS Lambda function ARN for direct invocation.
          example: "https"
      required:
        - endpoint

    WebhookResponse:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the webhook.
          example: "7"
        scope:
          type: string
          description: |
            The type of events triggering the webhook, based on the `scope` defined in the request.
          example: "appointment"
        endpoint:
          type: string
          description: The URL where the webhook sends POST requests.
          example: "https://example.com/webhook"
        signing_key:
          type: string
          description: |
            A secret key used for securing the webhook. This key is optional and may be `null` if not required.
          nullable: true
          example: "supersecretkey"
        client_id:
          type: string
          description: The client-specific identifier for the webhook.
          example: "testing"
        protocol:
          type: string
          description: |
            The protocol used for the webhook communication, defined in the `protocol` field of the request.
          example: "https"
        created_at:
          type: string
          format: date-time
          description: The timestamp when the webhook was created.
          example: "2024-10-07T13:53:52Z"
        updated_at:
          type: string
          format: date-time
          description: The timestamp when the webhook was last updated.
          example: "2024-10-07T13:53:52Z"
        created_by:
          type: string
          description: The identifier of the user or service that created the webhook.
          example: "testing"
        updated_by:
          type: string
          description: The identifier of the user or service that last updated the webhook.
          example: "testing"

    WebhookResponseList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/WebhookResponse'
        msg:
          type: string
          description: A message indicating the status of the response, typically `"success"`.
          example: "success"

    UpdateWebhookRequest:
      type: object
      properties:
        signing_key:
          type: string
          description: |
            A new signing key for securing webhook payloads. This should replace the existing signing key securely.
          example: "newsecretkey"
        scope:
          type: string
          description: |
            Specifies the type of events that will trigger the webhook.
            - "all": Trigger on all events.
            - "appointment.*": Trigger on appointment-related events.
            - "prescription.*": Trigger on appointment-related events.
          example: "https://newexample.com/webhook"

paths:
  /notification/v1/connect/webhook/subscriptions:
    post:
      tags:
        - Webhooks
      summary: Register Webhook
      description: |
        Registers a new webhook triggered by specific events. Each webhook is linked to a `business_id`, `client_id`, `url`, and a `scope` defining the events that trigger it. The service sends POST requests to the specified URL for these events. The URL must be reachable and preferably secure (HTTPS). Optionally, a signing key can be provided to verify webhook payload authenticity.
      security:
        - auth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterWebhookRequest'
      responses:
        '201':
          description: Webhook registered successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/WebhookResponse'
                  msg:
                    type: string
                    example: "success"
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "requested endpoint is already registered"
                      code:
                        type: string
                        example: "INVALID_REQUEST"
        '401':
          description: Unauthorized request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Unauthorized request"
                      code:
                        type: string
                        example: "INVALID_REQUEST"
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Internal Server Error"
                      code:
                        type: string
                        example: "SERVER_ERROR"
    get:
      tags:
        - Webhooks
      summary: Get Webhooks
      description: |
        Retrieves all registered webhooks. This endpoint allows clients to fetch a list of all webhooks that have been registered. Each webhook in the list includes details such as the unique identifier, the scope of events that trigger the webhook, the endpoint URL, the signing key (if provided), the client ID, the protocol used, and timestamps for when the webhook was created and last updated. This information helps clients manage and audit their webhook configurations.
      security:
        - auth: []
      responses:
        '200':
          description: List of webhooks.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/WebhookResponse'
                  msg:
                    type: string
                    example: "success"
        '401':
          description: Unauthorized request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Unauthorized request"
                      code:
                        type: string
                        example: "INVALID_REQUEST"
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Internal Server Error"
                      code:
                        type: string
                        example: "SERVER_ERROR"

  /notification/v1/connect/webhook/subscriptions/{id}:
    patch:
      tags:
        - Webhooks
      summary: Update a Webhook
      description: |
        Updates an existing webhook's signing key or scope based on its ID. This endpoint allows clients to modify the scope of events for whom the webhook sends data or update the signing key used for verifying the authenticity of webhook payloads. The `id` parameter in the path specifies the webhook to be updated. The request body should include the new scope or signing key. This operation helps clients maintain the accuracy and security of their webhook configurations.
      security:
        - auth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWebhookRequest'
      responses:
        '200':
          description: Webhook updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "webhook updated successfully"
                  msg:
                    type: string
                    example: "success"
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "requested webhook is not registered"
                      code:
                        type: string
                        example: "INVALID_REQUEST"
        '401':
          description: Unauthorized request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Unauthorized request"
                      code:
                        type: string
                        example: "INVALID_REQUEST"
        '404':
          description: Webhook not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Webhook not found"
                      code:
                        type: string
                        example: "INVALID_REQUEST"
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Internal Server Error"
                      code:
                        type: string
                        example: "SERVER_ERROR"
    delete:
      tags:
        - Webhooks
      summary: Delete a Webhook
      description: |
        Deletes an existing webhook based on its ID. This endpoint allows clients to remove a previously registered webhook by specifying its unique identifier in the path parameter. The `id` parameter is required and must match the ID of the webhook to be deleted. Upon successful deletion, the service will no longer send POST requests to the webhook's URL. This operation helps clients manage and clean up their webhook configurations.
      security:
        - auth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Webhook deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "webhook deleted successfully"
                  msg:
                    type: string
                    example: "success"
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "requested webhook is not registered"
                      code:
                        type: string
                        example: "INVALID_REQUEST"
        '401':
          description: Unauthorized request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Unauthorized request"
                      code:
                        type: string
                        example: "INVALID_REQUEST"
        '404':
          description: Webhook not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Webhook not found"
                      code:
                        type: string
                        example: "INVALID_REQUEST"
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Internal Server Error"
                      code:
                        type: string
                        example: "SERVER_ERROR"