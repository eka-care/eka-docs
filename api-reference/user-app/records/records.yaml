openapi: 3.1.0
info:
  title: Document Upload API
  description: API to pre-sign the URL for uploading documents.
  version: 1.0.0
  license:
    name: Proprietary License
    url: https://developer.eka.care/license

servers:
  - url: https://api.eka.care
    description: Production server
  - url: https://api.dev.eka.care
    description: Development server
tags:
  - name: Records
    description: API related to records document management.
paths:
  /mr/api/v1/docs:
    get:
      summary: Fetch documents based on filters
      description: To get the list of all the records for an given patient oid
      operationId: getDocuments
      parameters:
        - name: sort
          in: query
          required: true
          schema:
            type: string
          description: Sort order of the documents.
        - name: accept
          in: header
          schema:
            type: string
            enum:
              - application/json
          example: application/json
          description: To get response in json format
      responses:
        '200':
          description: A list of documents matching the query.
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: object
                    properties:
                      items:
                        type: array
                        items:
                          type: object
                          properties:
                            record:
                              type: object
                              properties:
                                item:
                                  type: object
                                  properties:
                                    documentId:
                                      type: string
                                      description: Unique ID of the document.
                                      example: df04c7e6-577b-4990-948c-5a31820c6a67
                                    uploadDate:
                                      type: string
                                      format: date-time
                                      description: Date when the document was uploaded.
                                      example: 2024-08-06T07:39:35Z
                                    documentType:
                                      type: string
                                      description: Type of the document.
                                      example: TYPE_LAB_REPORT
                                    metadata:
                                      type: object
                                      properties:
                                        thumbnail:
                                          type: string
                                          format: uri
                                          description: URL of the document's thumbnail.
                                          example: https://vault-cdn.dev.eka.care/fac0704e-a0e3-4c93-a972-e6c1f188592d/df04c7e6-577b-4990-948c-5a31820c6a67/5dbc4b75-df1a-412d-82a3-77d54671398c.jpeg
                                        documentDate:
                                          type: string
                                          format: date-time
                                          description: Date of the document.
                                          example: 2021-09-08T18:30:00Z
                                        tags:
                                          type: array
                                          items:
                                            type: string
                                            description: Tags associated with the document.
                                            example: TYPE_TAG_SMART
                                    patientOid:
                                      type: string
                                      description: Patient OID associated with the document.
                                      example: 161494290947153
        '400':
          description: Bad Request. Invalid or missing parameters.
        '401':
          description: Unauthorized. Invalid JWT token or client ID.
        '500':
          description: Internal Server Error.
      security:
        - auth: []
    post:
      operationId: getAuthorization
      tags:
        - Records
      summary: Obtain a Presigned URL for Document Upload
      description: Generate a presigned URL that allows you to securely upload a document to the server. This URL can be used to upload the document directly without needing additional authentication or authorization steps.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                batch_request:
                  type: array
                  items:
                    $ref: '#/components/schemas/UpdateDocumentV3Request'
            example:
              batch_request:
                -
                  dt: "ps"
                  sh: false
                  dd_e: 1614556800
                  tg: ["tag1", "tag2"]
                  files:
                    -
                      contentType: "image/jpeg"
                      file_size: 110000
      responses:
        '200':
          description: Presigned URL successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUploadResponse'
              examples:
                ErrorUploadResponse:
                  summary: Example of an error response with an empty batch_request
                  value:
                    error: true
                    message: "Invalid document type."
                    batch_response: []  # Empty array for batch_request
                    upload_time: null
        '500':
          description: Internal Server Error. No response body is expected.
        '502':
          description: Bad Gateway. No response body is expected.
        '503':
          description: Service Unavailable. No response body is expected.
        '504':
          description: Gateway Timeout. No response body is expected.
      security:
        - auth: []

  /upload:
    post:
      summary: Upload Records
      description: Upload a records using the signed URL for each document requested in obtain authorization API
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              additionalProperties:
                type: string
              properties:
                file:
                  type: string
                  format: binary
                  description: The file to upload.
              required:
                - file
      responses:
        '204':
          description: No Content - Successful Upload with No Response Body
        '403':
          description: Forbidden - Access Denied
          content:
            application/xml:
              schema:
                type: object
                properties:
                  Error:
                    type: object
                    properties:
                      Code:
                        type: string
                        description: Error code.
                      Message:
                        type: string
                        description: Error message.
                      RequestId:
                        type: string
                        description: Request ID.
                      HostId:
                        type: string
                        description: Host ID.
                example:
                  Error:
                    Code: "AccessDenied"
                    Message: "Invalid according to Policy: Extra input fields: content-type"
                    RequestId: "JGD23XY93Z00Z2DB"
                    HostId: "NjZf6f4Yo3LwikPHTwtyS02TEftaoWWvS8BmfRlQmA5pwllX6FHyMuO4hNVT0AIBOwKHFoEFkk8="
        '500':
          description: Internal Server Error
  /mr/api/v1/docs/{doc_id}:
    patch:
      summary: Link Document Record
      description: This API is used to link a document record.
      parameters:
        - in: path
          name: doc_id
          required: true
          schema:
            type: string
            example: 2df9e795-d368-4ceb-be9d-b44281703827
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                dt:
                  type: string
                  description: |
                    The following values are allowed:
                    - `ps`: Prescription
                    - `lr`: Lab Report
                    - `ot`: Other
                    - `ds`: Discharge Summary
                    - `vc`: Vaccine Certificate
                    - `in`: Insurance
                    - `iv`: Invoice
                    - `sc`: Scan
                  enum:
                    - ps
                    - lr
                    - ot
                    - ds
                    - vc
                    - in
                    - iv
                    - sc
                  example: lr
                ndhm:
                  type: boolean
                  description: If true, the record will be linked.
                  example: true
                oid:
                  type: string
                  description: OID associated with the document.
                  example: "161847797963700"
              required:
                - dt
                - ndhm
                - oid
      responses:
        '200':
          description: Document linked successfully.
        '404':
          description: No such document.
        '5XX':
           description: Unexpected error.
      security:
        - auth: []

    delete:
      summary: Delete a document.
      description : This API is used to delete a document using a document ID.
      parameters:
        - in: path
          name: doc_id
          required: true
          schema:
            type: string
            example: 2df9e795-d368-4ceb-be9d-b44281703827
      responses:
        '200':
          description: Document deleted successfully.
        '404':
          description: No such document.
        '5XX':
          description: Unexpected error.
      security:
        - auth: []

    get:
      summary: Describes a document.
      description: Once you get the list of all the documents with coresponding id's, you can this to know more details about the document.
      operationId: getDocument
      parameters:
        - in: path
          name: doc_id
          required: true
          schema:
            type: string
            example: 2df9e795-d368-4ceb-be9d-b44281703827
      responses:
        '200':
          description: Description of a document.
          content:
            application/json:
              schema:
                type: object
                properties:
                  source:
                    type: string
                  document_date_epoch:
                      type: integer
                  tags:
                    type: array
                    items:
                      type: string
                  dt:
                    type: string
                    enum:
                      - TYPE_LAB_REPORT
                      - TYPE_PRESCRIPTION
                      - TYPE_DISCHARGE_SUMMARY
                      - TYPE_VACCINE_CERTIFICATE
                      - TYPE_INSURANCE
                      - TYPE_INVOICE
                      - TYPE_SCAN
                      - TYPE_OTHER
                  files:
                    type: array
                    items:
                      type: object
                      properties:
                        asset_url:
                          type: string
                          format: uri
                        file_type:
                          type: string
                          enum:
                            - IMG
                            - PDF
              example:
                source: "androidp"
                document_date: "2021-03-13T13:01:59Z"
                document_type: TYPE_LAB_REPORT
                tags: ["covid"]
                files:
                  - asset_url: https://sample-lab-report.s3.ap-south-1.amazonaws.com/161494290947153/2df9e795-d368-4ceb-be9d-b44281703827/0cb1277e-1c4d-42cc-acd1-9630497e4f9d.jpeg
                    file_type: IMG
                  - asset_url: https://sample-lab-report.s3.ap-south-1.amazonaws.com/161494290947153/2df9e795-d368-4ceb-be9d-b44281703827/0cb1277e-1c4d-42cc-acd1-9630497e4f9d.pdf
                    file_type: PDF
        '5XX':
          description: Unexpected error.
        '404':
          description: No such document.
      security:
        - auth: []

  /health/api/v1/fhir/retrieve:
    get:
      summary: Retrieve health records
      description: Retrieve a health record based on the given identifier, hip_id, and health_id in nrces FHIR json format.
      parameters:
        - name: identifier
          in: query
          required: true
          description: The unique identifier for the health record.
          schema:
            type: string
        - name: hip_id
          in: query
          required: true
          description: The HIP (Health Information Provider) ID.
          schema:
            type: string
        - name: health_id
          in: query
          required: true
          description: The health ID associated with the record.
          schema:
            type: string
      responses:
        '200':
          description: Successful retrieval of health records.
          content:
            application/json:
              schema:
                type: object
                properties:
                  resourceType:
                    type: string
                    example: Bundle
                  type:
                    type: string
                    example: document
                  link:
                    type: array
                    items:
                      type: object
                      properties:
                        url:
                          type: string
                        relation:
                          type: string
                  entry:
                    type: array
                    items:
                      type: object
                      properties:
                        resource:
                          type: object
                          properties:
                            author:
                              type: array
                              items:
                                type: object
                                properties:
                                  reference:
                                    type: string
                            date:
                              type: string
                              format: date-time
                            extension:
                              type: array
                              items:
                                type: object
                                properties:
                                  url:
                                    type: string
                                  valueString:
                                    type: string
                            id:
                              type: string
                            identifier:
                              type: object
                              properties:
                                system:
                                  type: string
                                value:
                                  type: string
                            meta:
                              type: object
                              properties:
                                lastUpdated:
                                  type: string
                                  format: date-time
                            resourceType:
                              type: string
                            section:
                              type: array
                              items:
                                type: object
                                properties:
                                  entry:
                                    type: array
                                    items:
                                      type: object
                                      properties:
                                        reference:
                                          type: string
                                  title:
                                    type: string
                            status:
                              type: string
                            subject:
                              type: object
                              properties:
                                reference:
                                  type: string
                            title:
                              type: string
                            type:
                              type: object
                              properties:
                                text:
                                  type: string
                  id:
                    type: string
                  meta:
                    type: object
                    properties:
                      versionId:
                        type: string
                      lastUpdated:
                        type: string
                        format: date-time
                      profile:
                        type: array
                        items:
                          type: string
                      security:
                        type: array
                        items:
                          type: object
                          properties:
                            code:
                              type: string
                            display:
                              type: string
                            system:
                              type: string
                  identifier:
                    type: object
                    properties:
                      system:
                        type: string
                      value:
                        type: string
                  timestamp:
                    type: string
                    format: date-time
        '404':
          description: when request identifier, hip_id, health_id has no data
          content:
            application/json:
              schema:
                type: object
                properties:
                  resourceType:
                    type: string
                    example: Bundle
                  type:
                    type: string
                    example: document
                  meta:
                    type: object
                    properties:
                      lastUpdated:
                        type: string
                        format: date-time
        '401':
          description: Unauthorized. Invalid or missing authentication.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
      security:
        - auth: []
  /mr/webhook/smart-report:
    post:
      summary: Smart Report Events
      description: >-
        When the records get uploaded, a webhook event is sent to register to get the smart report of the record upload. If there are multiple records upload in upload docs API we need to register web hook for all the document id recevied in the reponse. Use the below request payload to register to webhook. You can find [here](https://ekacare.notion.site/726b13df13ea4409b0cd30c6f3a80315?v=dcd10c722d3149d880ae889b06f4820a) list of parsing capablities we have as of now.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                event_type:
                  type: string
                  example: "smart-report"
                timestamp:
                  type: string
                  example: "2023-07-30T18:07:24.000Z"
                data:
                  type: object
                  properties:
                    document_id:
                      type: string
                      description: This is document_id which you have recevied Obtain a Presigned URL for Document Upload response
                    webook_url:
                      type: string
                      description: This url we will use to send the payload upon successful parsing of the record

      responses:
        '200':
          description: Event registered successfully
        '204':
          description: Event created successfully
        '400':
          description: Bad request
        '403':
          description: Forbidden - Access Denied
        '500':
          description: Something went wrong
      security:
        - auth: []
  /mr/api/smart-report/{random_access_token}:
    get:
      summary: Retrieve the smart report
      description: This API is temporary accessible, the random_access_token will be recevied in webook url shared by you while registering webook for uploaded document 
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                description: The response will be as per nrces format as described [here](https://www.nrces.in/ndhm/fhir/r4/profiles.html)
              example:
                resourceType: "Bundle"
                id: "3739707e-1123-46fe-918f-b52d880e4e7f"
                meta:
                  lastUpdated: "2016-08-07T00:00:00.000+05:30"
                identifier:
                  system: "https://www.max.in/bundle"
                  value: "3739707e-1123-46fe-918f-b52d880e4e7f"
                type: "document"
                timestamp: "2016-08-07T00:00:00.000+05:30"
                entry:
                  -
                    fullUrl: "Composition/c63d1435-b6b6-46c4-8163-33133bf0d9bf"
                    resource:
                      resourceType: "Composition"
                      id: "c63d1435-b6b6-46c4-8163-33133bf0d9bf"
                      identifier:
                        system: "https://www.max.in/document"
                        value: "c63d1435-b6b6-46c4-8163-33133bf0d9bf"
                      status: "final"
                      type:
                        coding:
                          -
                            system: "https://projecteka.in/sct"
                            code: "440545006"
                            display: "Prescription record"
                      subject:
                        reference: "Patient/RVH9999"
                      encounter:
                        reference: "Encounter/dab7fd2b-6a05-4adb-af35-bcffd6c85b81"
                      date: "2016-08-07T00:00:00.605+05:30"
                      author:
                        -
                          reference: "Practitioner/MAX5001"
                          display: "Dr Laxmikanth J"
                      title: "Prescription"
                      section:
                        -
                          title: "OPD Prescription"
                          code:
                            coding:
                              -
                                system: "https://projecteka.in/sct"
                                code: "440545006"
                                display: "Prescription record"
                        -
                          reference: "MedicationRequest/68d9667c-00c3-455f-b75d-d580950498a0"
                  -
                    fullUrl: "Practitioner/MAX5001"
                    resource:
                      resourceType: "Practitioner"
                      id: "MAX5001"
                      identifier:
                        -
                          system: "https://www.mciindia.in/doctor"
                          value: "MAX5001"
                      name:
                          -
                            text: "Laxmikanth J"
                            prefix:
                              -
                                "Dr"
                            suffix:
                              -
                                "MD"
                  -
                    fullUrl: "Patient/RVH9999"
                    resource:
                      resourceType: "Patient"
                      id: "RVH9999"
                      name:
                        -
                          text: "Keith David"
                      gender: "male"
                  -
                    fullUrl: "Encounter/dab7fd2b-6a05-4adb-af35-bcffd6c85b81"
                    resource:
                      resourceType: "Encounter"
                      id: "dab7fd2b-6a05-4adb-af35-bcffd6c85b81"
                      status: "finished"
                      class:
                        system: "http://terminology.hl7.org/CodeSystem/v3-ActCode"
                        code: "AMB"
                        display: "Outpatient visit"
                      subject:
                        reference: "Patient/RVH9999"
                      period:
                        start: "2016-08-07T00:00:00+05:30"
                  -
                    fullUrl: "Medication/54ab5657-5e79-4461-a823-20e522eb337d"
                    resource:
                      resourceType: "Medication"
                      id: "54ab5657-5e79-4461-a823-20e522eb337d"
                      code:
                        coding:
                          -
                            system: "https://projecteka.in/act"
                            code: "R05CB02"
                            display: "bromhexine 24 mg"
                  -
                    fullUrl: "MedicationRequest/68d9667c-00c3-455f-b75d-d580950498a0"
                    resource:
                      resourceType: "MedicationRequest"
                      id: "68d9667c-00c3-455f-b75d-d580950498a0"
                      status: "active"
                      intent: "order"
                      medicationReference:
                        reference: "Medication/54ab5657-5e79-4461-a823-20e522eb337d"
                      subject:
                        reference: "Patient/RVH9999"
                      authoredOn: "2016-08-07T00:00:00+05:30"
                      requester:
                        reference: "Practitioner/MAX5001"
                      dosageInstruction:
                        -
                          text: "1 capsule 2 times a day"


          description: If system was able to generate smart report you will get the nrces format json data
        '400':
          description: Bad request
        '403':
          description: Forbidden - Access Denied
        '500':
          description: Something went wrong

components:
  schemas:
    DocumentTypeQueryParam:
      type: string
      description: |
        Specifies the type of document being uploaded. 
        The following values are allowed:
        - `ps`: Prescription
        - `lr`: Lab Report
        - `ot`: Other
        - `ds`: Discharge Summary
        - `vc`: Vaccine Certificate
        - `in`: Insurance
        - `iv`: Invoice
        - `sc`: Scan
      enum:
        - ps
        - lr
        - ot
        - ds
        - vc
        - in
        - iv
        - sc

    FileUploadRequest:
      type: object
      properties:
        contentType:
          type: string
        file_size:
          type: integer
          format: int64
          description: Unit of file size should be bytes

    UpdateDocumentV3Request:
      type: object
      properties:
        dt:
          $ref: '#/components/schemas/DocumentTypeQueryParam'
        dd_e:
          type: integer
          format: int64
          description: Format should be in epoch time.
        sh:
          type: boolean
        tg:
          type: array
          items:
            type: string
        files:
          type: array
          items:
            $ref: '#/components/schemas/FileUploadRequest'

    UploadResponse:
      type: object
      properties:
        error:
          type: boolean
          example: false
        message:
          type: string
          example: ""
        batch_response:
          type: array
          items:
            $ref: '#/components/schemas/UploadResponseBody'
        token:
          type: string
          format: date-time

    ErrorUploadResponse:
      type: object
      properties:
        error:
          type: boolean
          example: true
        message:
          type: string
          description: Description of the error encountered
        batch_response:
          type: array
          items:
            $ref: '#/components/schemas/UploadResponseBody'
        token:
          type: string
          format: date-time

    UploadResponseBody:
      type: object
      properties:
        document_id:
          type: string
        forms:
          type: array
          items:
            $ref: '#/components/schemas/UploadResponseBodyForms'

    UploadResponseBodyForms:
      type: object
      properties:
        url:
          type: string
        fields:
          type: object
          additionalProperties:
            type: string
  securitySchemes:
    auth:
      type: apiKey
      in: header
      name: auth
      description: |
        The API requires the following auth in headers for authentication.
