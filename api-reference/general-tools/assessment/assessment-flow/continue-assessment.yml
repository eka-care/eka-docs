openapi: 3.0.3
info:
  title: Assessment APIs
  version: 1.0.0
servers:
  - url: https://api.eka.care

paths:
  /assessments/api/v1/start/{hash}:
    put:
      tags:
        - Assessments > Start
      summary: Start Assessment
      description: >-
        This API is used to start the assessment. It returns the first question of the assessment.
        <Tip>Use this API to get the first question.</Tip>
      
      security:
        - authApiKey: []

      parameters:
        - $ref: '#/components/parameters/client-id'
        - $ref: '#/components/parameters/locale'
      
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MasterComponentResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AS-continue-400"

  /assessment/api/v1/continue/{hash}/{qid}:
    put:
      tags:
        - Assessments > Continue
      summary: Continue Assessment
      description: >-
        This API is used to continue the assessment. It accepts answer in the request body and returns the next question of the assessment.
        <Tip>Call this API multiple times until progress reaches 100%</Tip>
      
      security:
        - authApiKey: []

      parameters:
        - $ref: '#/components/parameters/client-id'
        - $ref: '#/components/parameters/locale'

      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_response:
                  type: array
                  items:
                    type: object
                    oneOf:
                      - $ref: '#/components/schemas/ATSGRequest'
                        title: Autosuggest Request
                      - $ref: '#/components/schemas/RadioRequest'
                        title: RadioRequest
                      - $ref: '#/components/schemas/MultiRequest'
                        title: MultiRequest
                      - $ref: '#/components/schemas/RadioGroupRequest'
                        title: RadioGroupRequest
              description: >-
                The request body should contain the answer to the question depending on the type of question component.
                It should be in format as explained in above dropdown.
     
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MasterComponentResponse'
        '4XX':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AS-continue-400'

# Define your schemas here if needed
components:
  schemas:
    MasterComponentResponse:
      type: object
      properties:
        questions:
          type: array
          items:
            type: object
            properties:
              qid:
                type: integer
                example: 1
                description: >-
                  This is the question id. It is used to identify the question., its an integer, during start it will always be 0
              component_code:
                type: string
                example: <component-code>
              question_text:
                type: string
                example: <Question Text>
              tip:
                type: string
                example: <Tip>
              component_data:
                type: object
                properties:
                  url:
                    type: string
                    description: >-
                      This is valid for an autosuggest component
                  choices:
                    type: array
                    description: >-
                      This is valid for a choice type components, multi, radio (single choice), radio group
                    items:
                      type: object
                      properties:
                        choice_id:
                          type: string
                          example: xyzjahaj
                        choice_label:
                          type: string
                          example: I have Diabetes
                  default:
                    type: string
                    description: >-
                      This will be a choice id in case of choice components else will be a string in case of user-input components
              is_mandatory:
                type: boolean
                example: true
                description: >-
                  This is a boolean value, if true user has to answer this question
        is_last_question:
          type: boolean
          example: false
          description: >-
            This is a boolean value, if true this is the last question of the assessment
        progress:
          type: integer
          minimum: 0
          maximum: 100
          description: >-
            This is the progress of the assessment, it is a number between 0 and 100 
    AS-continue-400:
      type: object
      properties:
        error:
          type: object
          properties:
            error_code:
              type: string
              example: bad_request
            display_message:
              type: string
              example: (Generic User friendly message)
            message:
              type: string
              example: (Server error message)
      required:
        - error
    RadioRequest:
      type: object
      title: Radio Choice Request
      description: >-
        This is the request body for single select choice components
      properties:
        selected_choices:
          type: array
          maxItems: 1
          items:
            type: object
            properties:
              choice_id:
                type: string
                example: <id of the choice>
              choice_label:
                type: string
                example: <label of the choice>
            required:
              - choice_id
      required:
        - selected_choices
    MultiRequest:
      type: object
      title: Multi Choice Request
      description: >-
        This is the request body for multi choice components
      properties:
        selected_choices:
          type: array
          items:
            type: object
            properties:
              choice_id:
                type: string
                example: <id of the choice>
              choice_label:
                type: string
                example: <label of the choice>
            required:
              - choice_id
      required:
        - selected_choices 
    ATSGRequest:
      type: object
      properties:
        selected_choices:
          type: object
          properties:
            choice_id:
              type: string
              example: <id of the choice>
            choice_label:
              type: string
              example: <label of the choice>
          required:
            - choice_id
            - choice_label
      required:
        - selected_choices
    RadioGroupRequest:
      type: object
      properties:
        selected_choices:
          type: object
          properties:
            choice_id:
              type: string
              example: <id of the choice>
            choice_label:
              type: string
              example: <label of the choice>
            qualifier_id:
              type: string
              example: a
          required:
            - choice_id
            - qualifier_id
      required:
        - selected_choices

  parameters:
    client-id: 
      name: client-id
      in: header
      required: true
      description: >-
        The client id of the user. It is used to identify the user.
      schema:
        type: string
        default: hello
      example: hello
    locale:
      name: locale
      in: header
      description: >-
        The locale of the user. It is used to determine the language of the assessment. Supported locales are `en`, `hi`, `kn` for english, hindi and kannada respectively. Default value is `en`.
      schema:
        type: string
        enum: [en, hi, kn]
        default: en
        example: en
      example: en

  securitySchemes:
    authApiKey:
      in: header
      name: auth
      type: apiKey
