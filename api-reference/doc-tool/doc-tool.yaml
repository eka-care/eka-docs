openapi: 3.0.0
info:
  title: Ekacare API & Webhook Documentation
  contact: { }
  version: '1.0'
servers:
- description: Production
  url: https://api.eka.care
- description: Stage/Sandbox
  url: https://api.dev.eka.care
paths:
  /connect-auth/v1/account/login:
    post:
      tags:
        - Auth
      summary: Auth Login
      description: >-
        ### Auth Login API


        The Auth Login API allows clients to authenticate by providing their
        client ID and secret. Upon successful authentication, it responds with
        an access token that is valid for 30 minutes. This token must be
        included in the `auth` header for all subsequent API requests to ensure
        secure access.
      operationId: AuthLogin
      parameters: [ ]
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/AuthLoginRequest'
                - example:
                    client_id: testing
                    client_secret: 4440ffe2-07e4-3364-a162-887f7652ae5d
            example:
              client_id: testing
              client_secret: 4440ffe2-07e4-3364-a162-887f7652ae5d
        required: true
      responses:
        '200':
          description: OK
          headers:
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Thu, 08 Aug 2024 09:38:26 GMT
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: '170'
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            apigw-requestid:
              content:
                text/plain:
                  schema:
                    type: string
                  example: cLvC4gT5BcwEJkg=
            access-control-allow-credentials:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'true'
            access-control-allow-headers:
              content:
                text/plain:
                  schema:
                    type: string
                  example: >-
                    X-Forwarded-For, X-Forwarded-Proto, User-Agent,
                    Content-Type, Postman-Token, Via, X-Forwarded-Port,
                    X-Amzn-Trace-Id, Targetpod, Forwarded, Content-Length,
                    Apikey, Accept, Accept-Encoding, Content-Type,
                    Content-Length, Accept-Encoding, X-CSRF-Token,
                    Authorization, Origin, Cache-Control, X-Requested-With,
                    Auth, X-Token, X-Token-Exp, Flavour, Locale, Client-Id,
                    Jwt-Payload, Res-Payload, Device-Id, Version, Accept,
                    Resjwttoken, os-version, utm_source, utm_campaign,
                    utm_medium
            access-control-allow-methods:
              content:
                text/plain:
                  schema:
                    type: string
                  example: POST, HEAD, PATCH, OPTIONS, GET, PUT, DELETE
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/AuthLogin'
                  - example:
                      access_token: >-
                        eyJhbGciOiJIUzI1NiIsInR5cCI010101.eyJleHAiOjE3MjMxMTE3MDYsImlhdCI6MTcyMzEwOTkwNiwiYy1pZCI6InRlc3RpbmcifQ.RqiPmu983VyW8jm1RFW-UrW3m14ZezKqXfBzkKl80
              example:
                access_token: >-
                  eyJhbGciOiJIUzI1NiIsInR5cCI010101.eyJleHAiOjE3MjMxMTE3MDYsImlhdCI6MTcyMzEwOTkwNiwiYy1pZCI6InRlc3RpbmcifQ.RqiPmu983VyW8jm1RFW-UrW3m14ZezKqXfBzkKl80
            application/json; charset=utf-8:
              schema:
                allOf:
                  - $ref: '#/components/schemas/200Success'
                  - example:
                      access_token: >-
                        eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3MjMxMTE3MDYsImlhdCI6MTcyMzEwOTkwNiwiYy1pZCI6InRlc3RpbmcifQ.RqiPmu983VyW8jm1RFW-UrW3m14ZezKqXfBTkElsoPG
              example:
                access_token: >-
                  eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3MjMxMTE3MDYsImlhdCI6MTcyMzEwOTkwNiwiYy1pZCI6InRlc3RpbmcifQ.RqiPmu983VyW8jm1RFW-UrW3m14ZezKqXfBTkElsoPG
      deprecated: false
  /v1/business/doctor/patient/add:
    post:
      tags:
        - Patient Registration API
      summary: Add Patient to Directory
      description: >-
        This functionality enables the addition of new patient records to a
        business' directory. Users can provide necessary details such as personal
        information, contact details, and medical history to create a new
        patient profile.


        > _In case the patient is already registered with Eka care, then
        passing the patient eka id will be enough_
        
        
        <Warning> Right now adding a patient is done wrt to a specific doctor,
        which automatically adds the patient to the business directory as well. 
        This will be `deprecated` soon by adding patient directly to a business (WIP). </Warning>

        
        
        ### Request Parameters


        Parameter


        | Param | Type | Expected Values | Description | Required/Optional/Not Required
        |

        | --- | --- | --- | --- | --- |

        | patient_oid | string |  | In case patient oid already exists use this
        - no need for whole profile |

        | designation | varchar(10) | Mr./Miss/Mrs./Dr | Patient Designation | Optional |

        | first_name | varchar(100) | Test | First Name | Required |

        | middle_name | varchar(100) |  | Middle Name | Optional |

        | last_name | varchar(100) | Patient | Last Name | Optional |

        | dob | Date | 1987-01-06 | Patient DOB | Required |

        | age | varchar(20) | 36 | Patient Age | Optional |

        | mobile | varchar(15) | +919999999999 | Mobile Number with country code | Required
        |

        | gender | varchar(10) | M/F/O | Patient Gender | Required |

        | email | varchar(100) |
        [test@orbi.health](https://mailto:pp@orbi.health) | Patient Email
        Address | Optional |

        | address | object |  | Address Object | Optional |

        | address.city | varchar(300) | Bangalore | City | Optional |

        | address.line1 | varchar(300) | ABC | Address Line 1 | Optional |

        | address.line2 | varchar(300) | XYZ | Address Line 2 | Optional |

        | address.pincode | int(11) | 560049 | Pincode | Optional |

        | address.state | varchar(100) | Karnataka | State | Optional |

        | address.country | varchar(100) | India | Country | Optional |

        | metadata | object |  | Metadata Object (Set of key-value pairs) | Optional |

        | metadata.blood_group | varchar(10) | AB+ | Blood Group | Optional |

        | metadata.aadhar_number | varchar(20) | 12345 | Aadhar Number | Optional |
        
        | metadata.UHID | varchar(20) | VP128 | Unique Health ID | Optional |
        
        | doctor_id (to_be_deprecated) | varchar(20) | 12345 | doctor_id | Required |


        ### Response Parameters


        | Parameter | Type | Expected Values | Description |

        | --- | --- | --- | --- |

        | response | object |  | Response Object |

        | response.patient_oid | string | 1234567890 | Generated Patient OID |

        | response.profile | object |  | Profile Object |

        | response.profile.id | string | 1234567890 | Profile ID |

        | response.profile.created_at | datetime | 2024-06-12T21:55:51.593Z |
        Profile Creation Timestamp |

        | response.profile.updated_at | datetime | 2024-06-17T09:52:55.257Z |
        Profile Update Timestamp |


        **Status Codes**


        • 200: Success


        • 403: Patient data missing


        • 500: Wrong API URL/Token mismatched/Wrong JSON request.
      operationId: AddPatienttoDirectory
      parameters:
        - name: auth
          in: header
          required: True
          description: >-
            The auth token of business_id. It is used to authenticate the business. The token can be fetched from the auth api.
          schema:
            type: string
          example: >-
            eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJiX2lkIjoiMTIzNDU2IiwiY2xpZW50X2lkIjoiNzg5MCIsImV4dHJhX2ZpZWxkIjoiZXh0cmFfZmllbGRfZGF0YSJ9.q9KzBI6f4l3OyM_EkB5Quq0l9EEMFh5JS-fx3F_PHUM
      requestBody:
        description: 'Request body for adding a patient to the directory'
        content:
          application/json:
            schema:
              type: string
            example:
              patient_oid: "123456789"
              designation: "Mr."
              first_name: "Test"
              middle_name: ""
              last_name: "Patient"
              dob: "1987-01-06"
              mobile: "+919999999999"
              gender: "M"
              doctor_id: "{{doctor_id}}"
              address:
                city: "Bangalore"
                line1: "ABC"
                line2: "XYZ"
                pincode: 560049
                state: "Karnataka"
                country: "India"
              metadata:
                blood_group: "AB+"
                aadhar_number: "12345"
                notes: "Has a history of HTN"
        required: true
      responses:
        '200':
          description: OK
          headers:
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Tue, 24 Mar 2020 06:26:06 GMT
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: '380'
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            Server:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nginx/1.10.3 (Ubuntu)
            Vary:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Cookie, Accept-Encoding
            Content-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: gzip
            Strict-Transport-Security:
              content:
                text/plain:
                  schema:
                    type: string
                  example: max-age=15768000
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/200OK'
                  - example:
                      data:
                        patient_oid: '123456789'
                        profile:
                          id: '123456789'
                          created_at: '2024-06-12T21:55:51.593Z'
                          updated_at: '2024-06-17T09:52:55.257Z'
              example:
                data:
                  patient_oid: '123456789'
                  profile:
                    id: '123456789'
                    created_at: '2024-06-12T21:55:51.593Z'
                    updated_at: '2024-06-17T09:52:55.257Z'
        '403':
          description: Forbidden
          headers: { }
          content:
            application/json:
              schema:
                allOf:
                  - $ref: >-
                      #/components/schemas/403ForbiddenBusinessPatientDetailsMissing1
                  - example:
                      data: { }
                      error:
                        code: NOT_ALLOWED
                        message: You are not allowed to add resource
              example:
                data: { }
                error:
                  code: NOT_ALLOWED
                  message: You are not allowed to add resource
        '500':
          description: Internal Server Error
          headers: { }
          content:
            application/json:
              schema:
                allOf:
                  - $ref: >-
                      #/components/schemas/500WrongAPIURLTokenmismatchedWrongJSONrequest.1
                  - example:
                      data: { }
                      error:
                        code: INVALID_DATA
                        message: Data entered in incorrect
              example:
                data: { }
                error:
                  code: INVALID_DATA
                  message: Data entered in incorrect
      deprecated: false
  /dr/v1/business/patients/{patient_id}:
    get:
      tags:
        - Patient Registration API
      summary: Get patient details by profile id
      description: >-
        This API provides functionality to get details of a patient by their Eka
        profile id, from a business' directory. 
        
        The patient should have been previously added to the business directory for this API to return the patient's details.


        ### Request Parameter


        | Parameter | Type | Expected Values | Description |
        Required/Optional/Not Required |

        | --- | --- | --- | --- | --- |

        | patient_id | string | Patient's Eka profile id | Patient's eka profile id | Required |


        ### **Response parameter**


        | Parameter                           | Type      | Expected Values                           | Description                                               |
        
        | ----------------------------------- | --------- | ----------------------------------------- | --------------------------------------------------------- |
        
        | data                                | object    |                                           | Response data object                                      |
        
        | data.last_visit                     | datetime  | "2024-05-17T12:36:43.136Z"                | Timestamp of last visit                                   |
        
        | data.name                           | string    | "John Doe"                                | Patient's full name                                       |
        
        | data.patient_id                     | string    | "987654321012345"                         | Unique identifier for the patient                         |
        
        | data.patient_profile                | object    |                                           | Detailed patient profile information                      |
        
        | data.patient_profile.address        | object    |                                           | Patient's address information                             |
        
        | data.patient_profile.address.city   | string    | "Bengaluru"                               | City of residence                                         |
        
        | data.patient_profile.address.line1  | string    | "ABC, Brigade Metropolis,"              | Address line 1                                            |
        
        | data.patient_profile.address.pincode| string    | "560048"                                  | Pincode                                                   |
        
        | data.patient_profile.created_at     | datetime  | "2024-06-20T10:17:33.242Z"                | Timestamp of profile creation                             |
        
        | data.patient_profile.dob            | date      | "1990-05-17"                              | Patient's date of birth                                   |
        
        | data.patient_profile.email          | string    | "john.doe@example.com"                    | Patient's email address                                   |
        
        | data.patient_profile.first_name     | string    | "John"                                    | Patient's first name                                      |
        
        | data.patient_profile.middle_name    | string    | ""                                        | Patient's middle name (can be empty)                      |
        
        | data.patient_profile.last_name      | string    | "Doe"                                     | Patient's last name                                       |
        
        | data.patient_profile.gender         | string    | "M"/"F"/"O"                                    | Patient's gender                                          |
        
        | data.patient_profile.metadata       | object    |                                           | Metadata related to the patient                           |
        
        | data.patient_profile.metadata.blood_group | string | ""                                    | Patient's blood group                                     |
        
        | data.patient_profile.metadata.uhid  | string    | "DESK-177"                                | Unique Health Identifier (UHID)                           |
        
        | data.patient_profile.mobile         | string    | "+919876543210"                           | Patient's mobile number                                   |
        
        | data.patient_profile.patient_id     | string \| null | null                                 | Unique identifier for the patient (can be null)           |
        
        | status_code                         | integer   | 200                                       | HTTP status code of the response                          |
        
        | success                             | boolean   | true                                      | Indicates if the request was successful                   |

        
        
        **Status Codes**


        • 200: Success


        • 403: Patient/Business data missing


        • 500: Wrong API URL/Wrong JSON request/ Something went wrong
      operationId: Getpatientdetailsbyid
      parameters:
        - name: auth
          in: header
          required: True
          description: >-
            The auth token of the business. It is used to authenticate the client. This should be fetched from auth api.
          schema:
            type: string
          example: >-
            eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJiX2lkIjoiMTIzNDU2IiwiY2xpZW50X2lkIjoiNzg5MCIsImV4dHJhX2ZpZWxkIjoiZXh0cmFfZmllbGRfZGF0YSJ9.q9KzBI6f4l3OyM_EkB5Quq0l9EEMFh5JS-fx3F_PHUM
        - name: patient_id
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          headers:
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Tue, 24 Mar 2020 06:26:06 GMT
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: '380'
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            Server:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nginx/1.10.3 (Ubuntu)
            Vary:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Cookie, Accept-Encoding
            Content-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: gzip
            Strict-Transport-Security:
              content:
                text/plain:
                  schema:
                    type: string
                  example: max-age=15768000
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/200OK1'
                  - example:
                      data:
                        name: Raj Sharma
                        patient_id: '189673451298376'
                        patient_profile:
                          patient_id: '189673451298376'
                          first_name: Raj
                          middle_name: ''
                          last_name: Sharma
                          gender: "M"
                          dob: '1988-11-30'
                          email: raj.sharma@example.com
                          mobile: '+919876543210'
                          address:
                            line1: 'B504, Seabreeze Heights,'
                            city: Mumbai
                            pincode: '400001'
                          metadata:
                            blood_group: B+
                            uhid: HOSP-291
                            alternate_phone: '+919876543211'
                            marital_status: "Married"
                            tag: "tag#1"

                          created_at: '2024-08-12T09:23:45.678Z'

                      status_code: 200
                      success: true
        '403':
          description: Forbidden
          headers: { }
          content:
            application/json:
              schema:
                allOf:
                  - $ref: >-
                      #/components/schemas/403ForbiddenBusinessPatientDetailsMissing1
                  - example:
                      data: { }
                      error:
                        code: UNAUTHORIZED_PATIENT_SEARCH
                        message: >-
                          Unauthorized access: You do not have permission to
                          search for patients in this directory
              example:
                data: { }
                error:
                  code: UNAUTHORIZED_PATIENT_SEARCH
                  message: >-
                    Unauthorized access: You do not have permission to search
                    for patients in this directory
        '500':
          description: Internal Server Error
          headers: { }
          content:
            application/json:
              schema:
                allOf:
                  - $ref: >-
                      #/components/schemas/500WrongAPIURLTokenmismatchedWrongJSONrequest.1
                  - example:
                      data: { }
                      error:
                        code: INVALID_DATA
                        message: Data entered is incorrect
              example:
                data: { }
                error:
                  code: INVALID_DATA
                  message: Data entered is incorrect
      deprecated: false
  /dr/v1/business/patients/search:
    get:
      tags:
        - Patient Registration API
      summary: Search Patient profiles by mobile number
      description: >-
        This API provides functionality to get all profiles of patient by their mobile
        number in business' directory. 
        
        
        <Note> This API only works on 10 digit mobile number and cannot be used for searching partial phone numbers.
        The patient with given mobile number should already be registered with business account for results to show up. </Note>
        


        ### Request Parameter


        | Parameter | Type | Expected Values | Description |
        Required/Optional/Not Required |

        | --- | --- | --- | --- | --- |

        | mobile | string | 10 digit phone number | Patient's mobile number | Required |


        ### **Response parameter**


        | Parameter                           | Type      | Expected Values                           | Description                                               |
        
        | ----------------------------------- | --------- | ----------------------------------------- | --------------------------------------------------------- |
        
        | data                                | object    |                                           | Response data object                                      |
        
        | data.profiles                       | array     |                                           | List of patient profiles                                  |
        
        | data.profiles[].last_visit          | string \| null | null                                     | Timestamp of last visit (can be null)                     |
        
        | data.profiles[].name                | string    | "Amit Kumar"                              | Patient's full name                                       |
        
        | data.profiles[].patient_id          | string  | "123456789012345"                        | Unique identifier for the patient (can be null)           |
        
        | data.profiles[].patient_profile     | object    |                                           | Detailed patient profile information                      |
        
        | data.profiles[].patient_profile.created_at | string    | "2024-08-13T07:31:53.750Z"               | Timestamp of profile creation                             |
        
        | data.profiles[].patient_profile.dob | string    | "1990-05-15"                              | Patient's date of birth                                   |
        
        | data.profiles[].patient_profile.first_name | string    | "Amit"                                  | Patient's first name                                      |
        
        | data.profiles[].patient_profile.middle_name | string    | ""                                       | Patient's middle name (can be empty)                      |
        
        | data.profiles[].patient_profile.last_name | string    | "Kumar"                                 | Patient's last name                                       |
        
        | data.profiles[].patient_profile.gender | string    | "M" / "F" / "O"                                  | Patient's gender                                          |
        
        | data.profiles[].patient_profile.mobile | string    | "+919876543210"                           | Patient's mobile number                                   |
        
        | data.profiles[].patient_profile.patient_id | string \| null | "123456789012345"                     | Unique identifier for the patient (can be null)           |
        
        | status_code                         | integer   | 200                                       | HTTP status code of the response                          |
        
        | success                             | boolean   | true                                      | Indicates if the request was successful                   |
        
        
        **Status Codes**


        • 200: Success


        • 403: Patient/Business data missing


        • 500: Wrong API URL/Wrong JSON request/ Something went wrong
      operationId: SearchPatientbymobile
      parameters:
        - name: mobile
          in: query
          description: ''
          required: true
          style: form
          explode: true
          schema:
            type: string
            example: <mobile_no>
        - name: auth
          in: header
          required: True
          description: >-
            The auth token of the user. It is used to authenticate the user.
          schema:
            type: string
          example: >-
            eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJiX2lkIjoiMTIzNDU2IiwiY2xpZW50X2lkIjoiNzg5MCIsImV4dHJhX2ZpZWxkIjoiZXh0cmFfZmllbGRfZGF0YSJ9.q9KzBI6f4l3OyM_EkB5Quq0l9EEMFh5JS-fx3F_PHUM
      responses:
        '200':
          description: OK
          headers:
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Tue, 24 Mar 2020 06:26:06 GMT
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: '380'
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            Server:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nginx/1.10.3 (Ubuntu)
            Vary:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Cookie, Accept-Encoding
            Content-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: gzip
            Strict-Transport-Security:
              content:
                text/plain:
                  schema:
                    type: string
                  example: max-age=15768000
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/200OK2'
                  - example:
                      data:
                        profiles:
                          - name: Amit Kumar
                            patient_id: '987654321098722'
                            patient_profile:
                              patient_id: '987654321098722'
                              first_name: Amit
                              middle_name: ''
                              last_name: Kumar
                              dob: '1990-05-15'
                              gender: 'M'
                              mobile: '+919876543210'
                              created_at: '2024-08-13T07:31:53.750Z'
                          - name: Priya Sharma
                            patient_id: '98765432109222'
                            patient_profile:
                              patient_id: '987654321098722'
                              first_name: Priya
                              middle_name: ''
                              last_name: Sharma
                              dob: '1985-09-20'
                              gender: 'F'
                              mobile: '+918765432109'
                              created_at: '2023-10-26T06:20:36.758Z'
                          - name: Rahul Gupta
                            patient_id: '987654321098765'
                            patient_profile:
                              patient_id: '987654321098765'
                              first_name: Rahul
                              middle_name: ''
                              last_name: Gupta
                              dob: '1978-11-30'
                              gender: 'M'
                              mobile: '+917654321098'
                              created_at: '2024-08-14T09:01:14.806Z'
                      status_code: 200
                      success: true
        '403':
          description: Forbidden
          headers: { }
          content:
            application/json:
              schema:
                allOf:
                  - $ref: >-
                      #/components/schemas/403ForbiddenBusinessPatientDetailsMissing1
                  - example:
                      data: { }
                      error:
                        code: UNAUTHORIZED_PATIENT_SEARCH
                        message: >-
                          Unauthorized access: You do not have permission to
                          search for patients in this directory
              example:
                data: { }
                error:
                  code: UNAUTHORIZED_PATIENT_SEARCH
                  message: >-
                    Unauthorized access: You do not have permission to search
                    for patients in this directory
        '500':
          description: Internal Server Error
          headers: { }
          content:
            application/json:
              schema:
                allOf:
                  - $ref: >-
                      #/components/schemas/500WrongAPIURLTokenmismatchedWrongJSONrequest.1
                  - example:
                      data: { }
                      error:
                        code: INVALID_DATA
                        message: Data entered is incorrect
              example:
                data: { }
                error:
                  code: INVALID_DATA
                  message: Data entered is incorrect
      deprecated: false
  /v1/business/patient/edit:
    patch:
      tags:
        - Patient Registration API
      summary: Update Patient Details  [WIP]
      description: >-
        Thi API provides functionality to update patient details for the
        registered patients.
        
        
        WIP: This API is currently under development and will be available soon.


      operationId: UpdatePatientDetailsAPI
      parameters:
        - name: auth
          in: header
          description: >-
            The auth token of the business. It is used to authenticate the client. This should be fetched from auth api.
          required: true
          style: simple
          schema:
            type: string
            example: >-
              eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJiX2lkIjoiMTIzNDU2IiwiY2xpZW50X2lkIjoiNzg5MCIsImV4dHJhX2ZpZWxkIjoiZXh0cmFfZmllbGRfZGF0YSJ9.q9KzBI6f4l3OyM_EkB5Quq0l9EEMFh5JS-fx3F_PHUM
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/UpdatePatientDetailsAPIRequest'
                - example:
                    firstName: John
                    middleName: Doe
                    lastName: NewLastName
                    mobile: '+91999999999'
                    email: john.doe@example.com
                    address:
                      city: Bangalore
                      line1: ABC
                      line2: XYZ
                      pincode: 560049
                      state: Karnataka
                      country: India
                    metadata:
                      blood_group: AB+
                      aadhar_number: '12345'
            example:
              firstName: John
              middleName: Doe
              lastName: NewLastName
              mobile: '+91999999999'
              email: john.doe@example.com
              address:
                city: Bangalore
                line1: ABC
                line2: XYZ
                pincode: 560049
                state: Karnataka
                country: India
              metadata:
                blood_group: AB+
                aadhar_number: '12345'
        required: true
      responses:
        '200':
          description: OK
          headers:
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Thu, 16 Apr 2020 09:22:28 GMT
            Transfer-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: chunked
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            Server:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nginx/1.10.3 (Ubuntu)
            Vary:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Accept-Encoding
            Strict-Transport-Security:
              content:
                text/plain:
                  schema:
                    type: string
                  example: max-age=15768000
            Content-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: gzip
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/200-Success1'
                  - example:
                      patientId: '1234567890'
              example:
                patientId: '1234567890'
      deprecated: false
  /dr/v1/business/entities:
    get:
      tags:
        - Doctor and clinic API
      summary: Get Clinic and Doctor details
      description: >-
        
        ### Overview
        
        The Get Clinic and Doctor Details API provides a comprehensive list of clinics and doctors associated with those clinics for a business. This API is designed to retrieve detailed information about clinics, the doctors working at each clinic, and the overarching business entity.
        
        ### Endpoint
        
        **URL:** `{{HOST}}/dr/v1/business/entities`
        
        
        **Method:** GET
        
        ### Request Parameters
        
        This endpoint does not require any parameters. The auth header contains business-id information which will be used to fetch the details.
        
        ### Response Parameters
        
        | Parameter | Type | Description |
        
        | --- | --- | --- |
        
        | status | integer | HTTP status code of the response |
        
        | data | object | Response data object |
        
        | data.clinics | array | List of clinic objects |
        
        | data.clinics[].clinic_id | string | Unique identifier of the clinic |
        
        | data.clinics[].name | string | Name of the clinic |
        
        | data.clinics[].doctors | array | List of doctor IDs associated with the clinic |
        
        | data.doctors | array | List of doctor objects |
        
        | data.doctors[].name | string | Name of the doctor |
        
        | data.doctors[].doctor_id | string | Unique identifier of the doctor |
        
        | data.business | object | Details of the business entity |
        
        | data.business.business_id | string | Unique identifier of the business |
        
        | data.business.name | string | Name of the business |

      operationId: GetClinicandDoctordetails
      parameters:
        - name: auth
          in: header
          description: >-
            The auth token of the business. It is used to authenticate the client. This should be fetched from auth api.
          required: true
          style: simple
          schema:
            type: string
            example: >-
              eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJiX2lkIjoiMTIzNDU2IiwiY2xpZW50X2lkIjoiNzg5MCIsImV4dHJhX2ZpZWxkIjoiZXh0cmFfZmllbGRfZGF0YSJ9.q9KzBI6f4l3OyM_EkB5Quq0l9EEMFh5JS-fx3F_PHUM
      responses:
        '200':
          description: OK
          headers: { }
          content:
            application/json:
              schema:
                type: string
                example:
                  status: 200
                  data:
                    clinics:
                      - clinic_id: "{{clinic_id1}}"
                        name: "Skin clinic derma 1"
                        doctors:
                          - "12345678901234"
                          - "11987654321765"
                      - clinic_id: "{{clinic_id2}}"
                        name: "family clinic 2"
                        doctors:
                          - "87198101903i101"
                    doctors:
                      - name: "Dr. GP Physician"
                        doctor_id: "12345678901234"
                        pic: "https://abc.eka.care/doctor-avatar/123456789"
                      - name: "Dr. ABC XYZ"
                        doctor_id: "11987654321765"
                        pic: "https://abc.eka.care/doctor-avatar/123456789"
                      - name: "Dr. Ortho Doctor"
                        doctor_id: "87198101903i101"
                        pic: "https://abc.eka.care/doctor-avatar/123456789"
                    business:
                      business_id: "{{business_id}}"
                      name: "{{business_name}}"
      deprecated: false
  /v1/business/doctor/{doctor_id}:
    get:
      tags:
        - Doctor and clinic API
      summary: Get Doctor profile
      description: >-
        
        ### Overview
        
        This API endpoint is used to retrieve detailed information about a specific doctor using their unique identifier. The response includes comprehensive information about the doctor, such as personal details, specializations, and associated clinics.
        
        ### Endpoint
        
        **URL:** `{{HOST}}/v1/business/doctor/{{doctor_id}}`
        
        
        **Method:** GET
        
        ### Request Parameters
        
        
        | Parameter | Type | Description | Required |
        
        | --- | --- | --- | --- |
        
        | doctor_id | string | Unique identifier for the doctor | Yes |
        
        
        ### Response Parameters


        | Parameter | Type | Description |

        | --- | --- | --- |

        | id | string | Unique identifier for the doctor in Eka |

        | created_at | datetime | Timestamp when the doctor profile was created
        |

        | profile | object | Doctor's profile details |

        | profile.personal | object | Personal details of the doctor |

        | profile.personal.designation | string | Designation (e.g., Dr.) |

        | profile.personal.first_name | string | First name of the doctor |

        | profile.personal.middle_name | string | Middle name of the doctor |

        | profile.personal.last_name | string | Last name of the doctor |

        | profile.personal.email | string | Email address of the doctor |

        | profile.personal.gender | string | Gender of the doctor |

        | profile.personal.dob | date | Date of birth of the doctor |

        | profile.professional | object | Professional details of the doctor |

        | profile.professional.active | boolean | Flag indicating if the profile
        is active |

        | profile.professional.about | string | About section describing the
        doctor |

        | profile.professional.language | array | Languages spoken by the doctor
        |

        | profile.professional.language\[\].language | string | Language name
        (e.g., English) |

        | profile.professional.clinics | array | Clinics associated with the
        doctor |

        | profile.professional.clinics\[\] | object | Clinic details |

        | profile.professional.clinics\[\]..id | string | Unique identifier for
        the clinic |

        | profile.professional.clinics\[\].city_name | string | City name where
        the clinic is located |

        | profile.professional.clinics\[\].name | string | Name of the clinic |

        | profile.professional.clinics\[\].email | string | Email address of the
        clinic |

        | profile.professional.clinics\[\].about | string | About section of the
        clinic |

        | profile.professional.clinics\[\].speciality | array | Specialities
        offered at the clinic |

        | profile.professional.clinics\[\].number | array | Contact numbers for
        the clinic |

        | profile.professional.clinics\[\].number\[\].name | string | Type of
        contact number (e.g., Phone, Mobile) |

        | profile.professional.clinics\[\].number\[\].n | string | Contact
        number |

        | profile.professional.clinics\[\].address | object | Address details of
        the clinic |

        | profile.professional.clinics\[\].address.line1 | string | Address line
        1 |

        | profile.professional.clinics\[\].address.line2 | string | Address line
        2 |

        | profile.professional.clinics\[\].address.city | string | City of the
        clinic |

        | profile.professional.clinics\[\].address.state | string | State of the
        clinic |

        | profile.professional.clinics\[\].address.country | string | Country of
        the clinic |

        | profile.professional.clinics\[\].address.pincode | string | Pincode of
        the clinic |

        | profile.professional.clinics\[\].location | array | Location
        coordinates of the clinic |

        | profile.professional.default_clinic | string | Default clinic ID |

        | profile.professional.all_registrations | array | Registrations of the
        doctor |

        | profile.professional.all_registrations\[\].id | number | Registration
        ID |

        | profile.professional.all_registrations\[\].council | string | Medical
        council name |

        | profile.professional.all_registrations\[\].medical_id | string |
        Medical ID number |

        | profile.professional.all_registrations\[\].year | string | Year of
        registration |

        | profile.professional.all_registrations\[\].default | boolean | Flag
        indicating if it is the default registration |

        | profile.professional.degree | array | Degrees earned by the doctor |

        | profile.professional.degree\[\].id | number | Degree ID |

        | profile.professional.degree\[\].name | string | Name of the degree |

        | profile.professional.degree\[\].branch_name | string | Branch name |

        | profile.professional.degree\[\].college_name | string | College name |

        | profile.professional.degree\[\].display_status | string | Display
        status of the degree |

        | profile.professional.degree\[\].start_year | string | Start year of
        the degree |

        | profile.professional.degree\[\].end_year | string | End year of the
        degree |

        | profile.professional.major_speciality | object | Major speciality of
        the doctor |

        | profile.professional.major_speciality.name | string | Name of the
        major speciality |

        | profile.professional.speciality | array | Specialities of the doctor |

        | profile.professional.speciality\[\].name | string | Name of the
        speciality |

        | **Status Codes** |  |  |


        • 200: Success


        • 403: Doctor data missing


        • 500: Wrong API URL/Token mismatched/Wrong JSON request.
      operationId: GetDoctorprofile
      parameters:
        - name: Content-Type
          in: header
          description: ''
          required: true
          style: simple
          schema:
            enum:
              - application/json
            type: string
            example: application/json
        - name: doctor_id
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          headers:
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Tue, 24 Mar 2020 06:26:06 GMT
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: '380'
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            Server:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nginx/1.10.3 (Ubuntu)
            Vary:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Cookie, Accept-Encoding
            Content-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: gzip
            Strict-Transport-Security:
              content:
                text/plain:
                  schema:
                    type: string
                  example: max-age=15768000
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/200OK4'
                  - example:
                      id: '1234567890'
                      profile:
                        personal:
                          first_name: doctor
                          middle_name: ''
                          last_name: doctor
                          dob: ''
                          gender: M
                        professional:
                          active: true
                          about: >-
                            doctor doctor is a Cardiologist with 43 years of
                            experience.
                          language:
                            - code: en
                              language: English
                          degree:
                            - name: MD
                              branch_name: ''
                              college_name: ''
                              start_year: ''
                              end_year: ''
                          major_speciality:
                            name: Cardiologist
                            code: CA
                          speciality:
                            - name: General Physician
                            - name: Diabetologist
                            - name: Allergy Specialist
                          clinics:
                            - id: '1234567899876'
                              name: Vagus Hospital & Health Services
                              contacts:
                                - name: Phone
                                  number: '+91999999999'
                              address:
                                line1: >-
                                  H No -122/a,, Pocket 2 back side of Yamaha 2
                                  wheeler showroom., Pocket 2, Gate No :-2,
                                  nearest to Homeopathy clinic.
                                city: Delhi
                                country: India
                                state: Delhi
                                pin: '110085'
                          default_clinic: '1234567899876'
              example:
                id: '1234567890'
                profile:
                  personal:
                    first_name: doctor
                    middle_name: ''
                    last_name: doctor
                    dob: ''
                    gender: M
                  professional:
                    active: true
                    about: >-
                      doctor doctor is a Cardiologist with 43 years of
                      experience.
                    language:
                      - code: en
                        language: English
                    degree:
                      - name: MD
                        branch_name: ''
                        college_name: ''
                        start_year: ''
                        end_year: ''
                    major_speciality:
                      name: Cardiologist
                      code: CA
                    speciality:
                      - name: General Physician
                      - name: Diabetologist
                      - name: Allergy Specialist
                    clinics:
                      - id: '1234567899876'
                        name: Vagus Hospital & Health Services
                        contacts:
                          - name: Phone
                            number: '+91999999999'
                        address:
                          line1: >-
                            H No -122/a,, Pocket 2 back side of Yamaha 2 wheeler
                            showroom., Pocket 2, Gate No :-2, nearest to
                            Homeopathy clinic.
                          city: Delhi
                          country: India
                          state: Delhi
                          pin: '110085'
                    default_clinic: '1234567899876'
        '403':
          description: Forbidden
          headers: { }
          content:
            application/json:
              schema:
                allOf:
                  - $ref: >-
                      #/components/schemas/403ForbiddenBusinessPatientDetailsMissing1
                  - example:
                      data: { }
                      error:
                        code: UNAUTHORIZED_ENTITY
                        message: >-
                          You are not authorized to view requisted resource
                          Doctor
              example:
                data: { }
                error:
                  code: UNAUTHORIZED_ENTITY
                  message: You are not authorized to view requisted resource Doctor
        '500':
          description: Internal Server Error
          headers: { }
          content:
            application/json:
              schema:
                allOf:
                  - $ref: >-
                      #/components/schemas/500WrongAPIURLTokenmismatchedWrongJSONrequest.1
                  - example:
                      data: { }
                      error:
                        code: INVALID_DATA
                        message: Doctor id entered is incorrect
              example:
                data: { }
                error:
                  code: INVALID_DATA
                  message: Doctor id entered is incorrect
      deprecated: false
  /v1/doctor/clinics/{doctor_id}:
    get:
      tags:
        - Doctor and clinic API
      summary: Get Clinics for doctor [WIP]
      description: >-
        This API provides functionality to search a patient by their mobile
        number in doctor's directory


        ### Request Parameter


        | Parameter | Type | Expected Values | Description |
        Required/Optional/Not Required |

        | --- | --- | --- | --- | --- |

        | doctor_oid | string |  | Unique identifier for the doctor | Required |


        ### **Response parameter**


        **Status Codes**


        • 200: Success


        • 403: Patient/Organization data missing


        • 500: Wrong API URL/Token mismatched/Wrong JSON request.
      operationId: GetClinicsfordoctor[WIP]
      parameters:
        - name: Content-Type
          in: header
          description: ''
          required: true
          style: simple
          schema:
            enum:
              - application/json
            type: string
            example: application/json
        - name: doctor_id
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          headers:
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Tue, 24 Mar 2020 06:26:06 GMT
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: '380'
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            Server:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nginx/1.10.3 (Ubuntu)
            Vary:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Cookie, Accept-Encoding
            Content-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: gzip
            Strict-Transport-Security:
              content:
                text/plain:
                  schema:
                    type: string
                  example: max-age=15768000
          content: { }
        '403':
          description: Forbidden
          headers: { }
          content:
            application/json:
              schema:
                allOf:
                  - $ref: >-
                      #/components/schemas/403ForbiddenBusinessPatientDetailsMissing11
                  - example:
                      data: { }
                      err:
                        code: DOCTOR_DATA_INVALID
                        message: Please enter valid doctor data
              example:
                data: { }
                err:
                  code: DOCTOR_DATA_INVALID
                  message: Please enter valid doctor data
        '500':
          description: Internal Server Error
          headers: { }
          content:
            application/json:
              schema:
                allOf:
                  - $ref: >-
                      #/components/schemas/500WrongAPIURLTokenmismatchedWrongJSONrequest.11
                  - example:
                      data: { }
                      err:
                        code: INVALID_DATA
                        message: Data entered in incorrect
              example:
                data: { }
                err:
                  code: INVALID_DATA
                  message: Data entered in incorrect
      deprecated: false
  /dr/v1/business/doctor/{doctor_id}/clinic/{clinic_id}/appointments/slots:
    get:
      tags:
        - Appointment API
      summary: Get Appointment Slots
      description: >-
        This API is the first step in booking appointment slot for a patient at
        a doctor's clinic
        
        <Note> We only support date range of D to D+1 to show all available slots of a day. </Note>



        **Parameters**


        | Param | Type | Expected Values | Description | Required/Optional/Not Required
        |

        | --- | --- | --- | --- | --- |

        | patient_oid | string |  | In case patient oid already exists use this
        - no need for whole profile |

        | designation | varchar(10) | Mr./Miss/Mrs./Dr | Patient Designation | Optional |

        | first_name | varchar(100) | Test | First Name | Required |

        | middle_name | varchar(100) |  | Middle Name | Optional |

        | last_name | varchar(100) | Patient | Last Name | Optional |

        | dob | Date | 1987-01-06 | Patient DOB | Required |

        | age | varchar(20) | 36 | Patient Age | Optional |

        | mobile | varchar(15) | +919999999999 | Mobile Number with country code | Required
        |

        | gender | varchar(10) | M/F/O | Patient Gender | Required |

        | email | varchar(100) |
        [test@orbi.health](https://mailto:pp@orbi.health) | Patient Email
        Address | Optional |

        | address | object |  | Address Object | Optional |

        | address.city | varchar(300) | Bangalore | City | Optional |

        | address.line1 | varchar(300) | ABC | Address Line 1 | Optional |

        | address.line2 | varchar(300) | XYZ | Address Line 2 | Optional |

        | address.pincode | int(11) | 560049 | Pincode | Optional |

        | address.state | varchar(100) | Karnataka | State | Optional |

        | address.country | varchar(100) | India | Country | Optional |

        | metadata | object |  | Metadata Object (Set of key-value pairs) | Optional |

        | metadata.blood_group | varchar(10) | AB+ | Blood Group | Optional |

        | metadata.aadhar_number | varchar(20) | 12345 | Aadhar Number | Optional |

        | metadata.UHID | varchar(20) | VP128 | Unique Health ID | Optional |

        | doctor_id (to_be_deprecated) | varchar(20) | 12345 | doctor_id | Required |


                ### Response Parameters


                | Parameter | Type | Expected Values | Description |

                | --- | --- | --- | --- |

                | response | object |  | Response Object |

                | response.patient_oid | string | 1234567890 | Generated Patient OID |

                | response.profile | object |  | Profile Object |

                | response.profile.id | string | 1234567890 | Profile ID |

                | response.profile.created_at | datetime | 2024-06-12T21:55:51.593Z |
                Profile Creation Timestamp |

                | response.profile.updated_at | datetime | 2024-06-17T09:52:55.257Z |
                Profile Update Timestamp |


        **Status codes**


        • 200: Success


        • 403: Business data missing


        • 500: Wrong API URL/Token mismatched/Wrong JSON request.
      operationId: GetAppointmentSlots
      parameters:
        - name: start_date
          in: query
          description: ''
          required: true
          style: form
          explode: true
          schema:
            type: string
            example: '{{start_date}}'
        - name: end_date
          in: query
          description: ''
          required: true
          style: form
          explode: true
          schema:
            type: string
            example: '{{end_date}}'
        - name: doctor_id
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: clinic_id
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          headers:
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Sun, 12 Apr 2020 11:09:57 GMT
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: '377'
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            Server:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nginx/1.10.3 (Ubuntu)
            Vary:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Cookie, Accept-Encoding
            Content-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: gzip
            Strict-Transport-Security:
              content:
                text/plain:
                  schema:
                    type: string
                  example: max-age=15768000
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      schedule:
                        type: object
                        additionalProperties:
                          type: object
                          additionalProperties:
                            type: array
                            items:
                              type: object
                              properties:
                                available:
                                  type: boolean
                                conf_id:
                                  type: string
                                e:
                                  type: string
                                  format: date-time
                                s:
                                  type: string
                                  format: date-time
                                slots_booked:
                                  type: integer
                                  nullable: true
                      services:
                        type: object
                        additionalProperties:
                          type: object
                          properties:
                            allow_patient_booking:
                              type: boolean
                            appointment_type:
                              type: string
                            c_at:
                              type: string
                              format: date-time
                            conf_id:
                              type: string
                            mode:
                              type: array
                              items:
                                type: string
                            owner_id:
                              type: string
                            post_pay:
                              type: boolean
                            pre_pay:
                              type: boolean
                            price:
                              type: number
                              nullable: true
                            service_name:
                              type: string
              example:
                data:
                  schedule:
                    '60532c7dcb46901ba3a3e462':
                      - service_type: consultation
                        slots:
                          - available: false
                            conf_id: 30daff8bf9df0abd81ad041003b4690a436db2ad26016814bca037ce0ba22e3b
                            e: '2024-09-05T09:30:00+05:30'
                            s: '2024-09-05T09:15:00+05:30'
                          - available: true
                            conf_id: 30daff8bf9df0abd81ad041003b4690a436db2ad26016814bca037ce0ba22e3b
                            e: '2024-09-05T09:45:00+05:30'
                            s: '2024-09-05T09:30:00+05:30'
                          - available: false
                            conf_id: 30daff8bf9df0abd81ad041003b4690a436db2ad26016814bca037ce0ba22e3b
                            e: '2024-09-05T10:00:00+05:30'
                            s: '2024-09-05T09:45:00+05:30'
                          - available: true
                            conf_id: 30daff8bf9df0abd81ad041003b4690a436db2ad26016814bca037ce0ba22e3b
                            e: '2024-09-05T10:15:00+05:30'
                            s: '2024-09-05T10:00:00+05:30'
                          - available: true
                            conf_id: 30daff8bf9df0abd81ad041003b4690a436db2ad26016814bca037ce0ba22e3b
                            e: '2024-09-05T10:30:00+05:30'
                            s: '2024-09-05T10:15:00+05:30'
                  services:
                    '30daff8bf9df0abd81ad041003b4690a436db2ad26016814bca037ce0ba22e3b':
                      allow_patient_booking: true
                      appointment_type: REGULAR
                      conf_id: 30daff8bf9df0abd81ad041003b4690a436db2ad26016814bca037ce0ba22e3b
                      conv_fee: 0
                      currency: INR
                      discount: 0
                      mode:
                        - in-clinic
                      owner_id: '161419272566611'
                      post_pay: false
                      pre_pay: true
                      price: 500
                      service_id: 1
                      service_name: "consultation"
                success: 'true'
                status_code: 200
      deprecated: false
  /v2/business/doctor/appointments/slots/book:
    post:
      tags:
        - Appointment API
      summary: Confirm Appointment Slot
      description: >-
        This API is used to book an appointment slot for a patient based on the
        available slots retrieved from the `get appointment slots` API.
        
        
        <Note> If Eka profile id of a patient is known, there is no need to pass entire patient meta information.
        Simply passing the patient_id will work.
        
        If patient is not already registered on eka, passing their info under "patient" key will create new profile id.</Note>


        **Method:** POST


        ### Request Parameters


        #### Patient Information


        | Parameter | Type | Expected Values | Description |
        Required/Optional/Not Required |

        | --- | --- | --- | --- | --- |
        
        | patient_id | string | 1234567890 | Patient's id on Eka | Optional |

        | designation | string | Mr./Miss/Mrs. | Patient's designation |
        Optional |

        | first_name | string | Test | Patient's first name | Required |

        | middle_name | string |  | Patient's middle name | Optional |

        | last_name | string | Test | Patient's last name | Required |

        | dob | Date | 1987-01-06 | Patient's date of birth | Required |

        | mobile | string | +919999999999 | Patient's mobile number with country code |
        Required |

        | gender | string | M/F/O | Patient's gender | Required |

        | email | string | [abc@eka.care](https://mailto:pp@orbi.health)
        | Patient's email address | Optional |


        #### Slot Information


        | Parameter | Type | Expected Values | Description |
        Required/Optional/Not Required |

        | --- | --- | --- | --- | --- |

        | start_time | datetime | 2024-06-11T09:00:00+05:30 | Start time of the
        appointment slot | Required |

        | end_time | datetime | 2024-06-11T09:30:00+05:30 | End time of the
        appointment slot | Required |

        | service_conf_id | string |
        904eec0a73d9b02d9145898db44e628bcb18e7a11cd92852be5a2d6f65159a04 |
        Configuration ID for the service | Required |
        
        
        #### Doctor and Clinic Information
        
  
        | Parameter | Type | Expected Values | Description | Required/Optional/Not Required |
        
        | --- | --- | --- | --- | --- |
        
        | doctor_id | string | 1234567890 | Doctor's ID | Required |

        | clinic_id | string | 1234567890 | Clinic's ID | Required |


        **Response Parameters**


        |  |  |  |  |

        | --- | --- | --- | --- |

        | Parameter | Type | Expected Values | Description |

        | status | Int | 200 | API response code |

        | start_time | Datetime | 2020-03-19T19:00:00Z | Appointment start date
        |

        | message | Varchar | Appointment has been confirmed | Response
        message |

        | appointment_id | Varchar | 9757016a-dfc2-TEST-a38e-df47b758f60d | Appointment ID |


        **Status Codes**  

        • 200: Success


        • 403: Forbidden access


        • 404: service_conf_id not found
      operationId: ConfirmAppointmentSlot
      parameters: [ ]
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              type: object
              properties:
                patient:
                  type: object
                  properties:
                    designation:
                      type: string
                    first_name:
                      type: string
                    middle_name:
                      type: string
                    last_name:
                      type: string
                    dob:
                      type: string
                      format: date
                    mobile:
                      type: string
                    gender:
                      type: string
                      enum: [ M, F, O ]
                slot:
                  type: object
                  properties:
                    start_time:
                      type: string
                      format: date-time
                    end_time:
                      type: string
                      format: date-time
                    service_conf_id:
                      type: string
                doctor_id:
                  type: string
                clinic_id:
                  type: string
            example:
              patient:
                patient_id: "098765434567890" # Optional
                designation: "Mr." #Optional
                first_name: "Test"
                middle_name: ""   #Optional
                last_name: "Patient"
                dob: "1987-01-06"
                mobile: "+919999999999"
                gender: "M"
              slot:
                start_time: "2024-06-11T09:00:00+05:30"
                end_time: "2024-06-11T09:30:00+05:30"
                service_conf_id: "904eec0a73d9b02d9145898db44e628bcb18e7a11cd92852be5a2d6f65159a04"
              doctor_id: "{{doctor_id}}"
              clinic_id: "{{clinic_id}}"
        required: true
      responses:
        '200':
          description: OK
          headers:
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Thu, 16 Apr 2020 08:47:12 GMT
            Transfer-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: chunked
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            Server:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nginx/1.10.3 (Ubuntu)
            Vary:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Accept-Encoding
            Strict-Transport-Security:
              content:
                text/plain:
                  schema:
                    type: string
                  example: max-age=15768000
            Content-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: gzip
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      start_time:
                        type: string
                        format: date-time
                      message:
                        type: string
                      appointment_id:
                        type: string
              example:
                data:
                  start_time: "2024-06-11T09:00:00+05:30"
                  end_time: "2024-06-11T09:30:00+05:30"
                  appointment_id: "{{appointment_id}}"
                  patient_id: "{{patient_id}}"
                  doctor_id: "{{doctor_id}}"
                  clinic_id: "{{clinic_id}}"
                  message: "Appointment has been confirmed"
                  created_at: "2024-06-10T09:00:00+05:30"
        '400':
          description: Bad Request
          headers:
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Thu, 16 Apr 2020 08:47:12 GMT
            Transfer-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: chunked
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            Server:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nginx/1.10.3 (Ubuntu)
            Vary:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Accept-Encoding
            Strict-Transport-Security:
              content:
                text/plain:
                  schema:
                    type: string
                  example: max-age=15768000
            Content-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: gzip
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/400BadRequest1'
                  - example:
                      data: { }
                      error:
                        code: INVALID_REQUEST_PARAMETERS
                        message: The request contains invalid parameters
              example:
                data: { }
                error:
                  code: INVALID_REQUEST_PARAMETERS
                  message: The request contains invalid parameters
      deprecated: false
  /v2/business/doctor/appointments/slots/reserve:
    post:
      tags:
        - Appointment API
      summary: Reserve appointment for business [Special Case- Do NOT use]
      description: >-
        This API is used to book an appointment slot for a patient which
        reserves an appointment in a dummy way, that can be rescheduled and
        checked in once patient is available.


        In this API, slots avaiability is not checked and a dumy reservation is
        made.


        Slots will **not** be `reserved` in this case but only an appointment
        will be assigned to a slot. Staff can then reschedule the appointment
        and assign to a particular doctor and a proper visit date and time.


        - if no `visit_start_date` is passed, next available slot of current
        date will be booked.
        
        - The dummy reservation **archives/deleted** once the date of
        reservation crosses.
        
        - To keep the reservation alive, one can pass a future date (say 3
        months) while calling this API so that booking is valid till then.
        
        - Staff can search for the patient name, go to the appointment, and
        reschedule to correct doctor+datetime
        
        
        **Method:** POST


        ### Request Parameters


        | Parameter | Type | Expected Values | Description |
        Required/Optional/Not Required |

        | --- | --- | --- | --- | --- |

        | first_name | varchar(100) | Patient | Patient's first name | Required
        |

        | middle_name | varchar(100) |  | Patient's middle name | Optional |

        | last_name | varchar(100) | Test | Patient's last name | Required |

        | dob | Date | 1987-01-06 | Patient's date of birth | Required |

        | mobile | varchar(15) | +919999999999 | Patient's mobile number |
        Required |

        | gender | varchar(10) | M/F/O | Patient's gender | Required |

        | doctor_id | varchar(100) | default | Doctor's ID | Required |

        | clinic_id | varchar(100) | {{clinic_id}} | Clinic's ID | Required |

        | visit_start_time | datetime | 2024-06-26T11:28:45.000Z | Start time of
        the appointment slot | Optional |

        | client_meta.client_visit_id | varchar(100) | RNI1234567 | Client visit
        ID | Optional |

        | client_meta.patient_id | varchar(100) | P123456 | Patient ID |
        Optional |


        **Response Parameters**


        | Parameter | Type | Expected Values | Description |
        Required/Optional/Not Required |

        | --- | --- | --- | --- | --- |

        | appointment_id | varchar(100) | apt-12345-123456 | Appointment's ID |
        Required |

        | doctor_id | varchar(100) | 1234567890 | Doctor's ID | Required |

        | patient_id | varchar(100) | 1234567890 | Patient's ID | Required |

        | clinic_id | varchar(100) | 019319i10i01a3e462 | Clinic's ID | Required
        |

        | channel | varchar(50) | Walking | Channel of appointment | Required |

        | status | varchar(10) | BK | Status of appointment | Required |

        | start_time | datetime | 2024-06-26T11:28:45.000Z | Start time of the
        appointment | Required |

        | end_time | datetime | 2024-06-26T11:28:45.000Z | End time of the
        appointment | Required |

        | message | varchar(255) | Appointment has been confirmed | Confirmation
        message | Required |


        **Status Codes**  

        • 200: Success


        • 400: Bad Request


        • 403: Forbidden
      operationId: Reserveappointmentforbusiness[SpecialCase-DoNOTuse]
      parameters:
        - name: x-api-key
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
            example: '{{x-api-key}}'
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              type: string
              example: |-
                {
                    "patient": {
                        "designation": "Mr.",
                        "first_name": "Test",
                        "middle_name": "",
                        "last_name": "Patient",
                        "dob": "1987-01-06",
                        "mobile": "+919999999999",
                        "gender": "M"
                    },
                    "visit_start_time":"2024-06-26T11:28:45.000Z",
                    "doctor_id" : {{doctor_id}},
                    "clinic_id" : {{clinic_id}},
                    "client_meta" : { // information from client registration system
                        "client_visit_id": "RNI1234567",
                        "patient_id" : "P123456",
                        "payment_details": {
                            "payment_id" : "txn_123",
                            "amount_paid" : "1010.50"
                        }
                    }

                }
            example: |-
              {
                  "patient": {
                      "designation": "Mr.",
                      "first_name": "Test",
                      "middle_name": "",
                      "last_name": "Patient",
                      "dob": "1987-01-06",
                      "mobile": "+919999999999",
                      "gender": "M"
                  },
                  "visit_start_time":"2024-06-26T11:28:45.000Z",
                  "doctor_id" : {{doctor_id}},
                  "clinic_id" : {{clinic_id}},
                  "client_meta" : { // information from client registration system
                      "client_visit_id": "RNI1234567",
                      "patient_id" : "P123456",
                      "payment_details": {
                          "payment_id" : "txn_123",
                          "amount_paid" : "1010.50"
                      }
                  }

              }
        required: true
      responses:
        '200':
          description: OK
          headers:
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Thu, 16 Apr 2020 08:47:12 GMT
            Transfer-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: chunked
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            Server:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nginx/1.10.3 (Ubuntu)
            Vary:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Accept-Encoding
            Strict-Transport-Security:
              content:
                text/plain:
                  schema:
                    type: string
                  example: max-age=15768000
            Content-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: gzip
          content:
            application/json:
              schema:
                type: string
                example: |-
                  {
                      "status" : 200,
                      "data": {
                          "appointment_id": {{appointment_id}},
                          "doctor_id": {{doctor_id}},
                          "patient_id": {{patient_id}},
                          "clinic_id": {{clinic_id}},
                          "channel": "Walkin",
                          "status": "BK",
                          "start_time": "2024-06-26T11:28:45.000Z",
                          "end_time": "2024-06-26T11:28:45.000Z",
                          "message": "Appointment has been confirmed",
                          "created_at": "2024-06-26T11:28:45.000Z"
                      }
                  }
              example: |-
                {
                    "status" : 200,
                    "data": {
                        "appointment_id": {{appointment_id}},
                        "doctor_id": {{doctor_id}},
                        "patient_id": {{patient_id}},
                        "clinic_id": {{clinic_id}},
                        "channel": "Walkin",
                        "status": "BK",
                        "start_time": "2024-06-26T11:28:45.000Z",
                        "end_time": "2024-06-26T11:28:45.000Z",
                        "message": "Appointment has been confirmed",
                        "created_at": "2024-06-26T11:28:45.000Z"
                    }
                }
        '400':
          description: Bad Request
          headers:
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Thu, 16 Apr 2020 08:47:12 GMT
            Transfer-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: chunked
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            Server:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nginx/1.10.3 (Ubuntu)
            Vary:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Accept-Encoding
            Strict-Transport-Security:
              content:
                text/plain:
                  schema:
                    type: string
                  example: max-age=15768000
            Content-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: gzip
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/400BadRequest3'
                  - example:
                      status: 400
                      data: { }
                      error:
                        code: INVALID_REQUEST_PARAMETERS
                        message: The request contains invalid parameters
              example:
                status: 400
                data: { }
                error:
                  code: INVALID_REQUEST_PARAMETERS
                  message: The request contains invalid parameters
        '403':
          description: Forbidden
          headers:
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Thu, 16 Apr 2020 08:47:12 GMT
            Transfer-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: chunked
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            Server:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nginx/1.10.3 (Ubuntu)
            Vary:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Accept-Encoding
            Strict-Transport-Security:
              content:
                text/plain:
                  schema:
                    type: string
                  example: max-age=15768000
            Content-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: gzip
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/403Forbidden3'
                  - example:
                      status: 403
                      data: { }
                      error:
                        code: UNAUTHORIZED_ENTITY
                        message: >-
                          Unauthorized access. Booking appointments for business
                          entities or doctors is not allowed
              example:
                status: 403
                data: { }
                error:
                  code: UNAUTHORIZED_ENTITY
                  message: >-
                    Unauthorized access. Booking appointments for business
                    entities or doctors is not allowed
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Thu, 16 Apr 2020 08:47:12 GMT
            Transfer-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: chunked
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            Server:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nginx/1.10.3 (Ubuntu)
            Vary:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Accept-Encoding
            Strict-Transport-Security:
              content:
                text/plain:
                  schema:
                    type: string
                  example: max-age=15768000
            Content-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: gzip
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/422-UnprocessableEntity1'
                  - example:
                      status: 422
                      data: { }
                      error:
                        code: APPOINTMENT_BOOKING_FAILED
                        message: Unable to book appointment due to unavailable slots
                        details:
                          reason: NO_AVAILABLE_SLOTS
                          doctorId: '12345'
              example:
                status: 422
                data: { }
                error:
                  code: APPOINTMENT_BOOKING_FAILED
                  message: Unable to book appointment due to unavailable slots
                  details:
                    reason: NO_AVAILABLE_SLOTS
                    doctorId: '12345'
      deprecated: false
      security: [ ]
  /v2/business/appointments/{appointment_id}:
    get:
      tags:
        - Appointment API
      summary: Get Appointment Details
      description: >-
        
        
        ### Overview

        This API endpoint is used to retrieve the details of an appointment
        using its unique identifier. The response includes comprehensive
        information about the appointment, including patient and doctor details,
        appointment status, and related services.
        
        
        Appointment_statuses:
          - BK    : Booked
          - CK    : Checked In
          - OG    : Ongoing
          - CM	  : Completed with Prescription
          - CMNP  : Completed without a Prescription
          - CN    : Cancelled
        
        
        ### Endpoint

        **URL:** `{{HOST}}/v2/business/appointments/{{appointment_id}}`  
        
        **Method:** GET

        ### Request Parameters

        | Parameter | Type | Description | Required |
        
        | --- | --- | --- | --- |
        
        | appointment_id | string | Unique identifier for the appointment | Yes |

        ### Response Parameters

        | Parameter | Type | Description |
        
        | --- | --- | --- |
        
        | data | object | Response data object |
        
        | data.aid | string | Unique identifier for the appointment |
        
        | data.created_at | datetime | Appointment creation timestamp |
        
        | data.doctor_oid | string | Unique identifier for the doctor |
        
        | data.patient_oid | string | Unique identifier for the patient |
        
        | data.clinic_id | string | Unique identifier for the clinic |
        
        | data.channel | string | Channel of the appointment (`Offline` or `Online`) |
        
        | data.status | string | Appointment status (`CM`, `IN`, `CMNP`, etc.) |
        
        | data.start_time | datetime | Start time of the appointment |
        
        | data.end_time | datetime | End time of the appointment |
        
        | data.visit_checkin | datetime | Check-in time for the visit |
        
        | data.visit_start | datetime | Start time for the visit |
        
        | data.visit_end | datetime | End time for the visit |
        
        | data.stage | string | Stage of the appointment (`COMPLETED`, etc.) |
        
        | data.visit-type | string | Type of visit (`WALKIN`, etc.) |
        
        | data.payment | object | Payment details |
        
        | data.payment.payment_id | string | Payment ID (nullable) |
        
        | data.payment.payment_status | string | Payment status (nullable) |
        
        | data.payment.amount | number | Payment amount (nullable) |
        
        | data.prescription_id | string | Prescription Id (if visit lead to Rx) |
        
        | data.service | object | Service details |
        
        | data.service.created_at | datetime | Service creation timestamp |
        
        | data.service.mode | array | Modes of the service (`in-clinic`, etc.) |
        
        | data.service.price | number | Service price (nullable) |
        
        | data.service.post_pay | boolean | Indicates if post-payment is allowed |
        
        | data.service.service_name | string | Name of the service |
                
        | data.service.appointment_type | string | Type of appointment (`REGULAR`, etc.) |
        
      operationId: GetappointmentDetails
      parameters:
        - name: auth
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
            example: 'auth'
        - name: appointment_id
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          headers:
            Date:
              schema:
                type: string
              example: Sun, 12 Apr 2020 11:09:57 GMT
            Content-Length:
              schema:
                type: string
              example: '377'
            Connection:
              schema:
                type: string
              example: keep-alive
            Server:
              schema:
                type: string
              example: nginx/1.10.3 (Ubuntu)
            Vary:
              schema:
                type: string
              example: Cookie, Accept-Encoding
            Content-Encoding:
              schema:
                type: string
              example: gzip
            Strict-Transport-Security:
              schema:
                type: string
              example: max-age=15768000
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      aid:
                        type: string
                      created_at:
                        type: string
                        format: date-time
                      doctor_oid:
                        type: string
                      patient_oid:
                        type: string
                      clinic_id:
                        type: string
                      channel:
                        type: string
                      status:
                        type: string
                      start_time:
                        type: string
                        format: date-time
                      end_time:
                        type: string
                        format: date-time
                      visit_checkin:
                        type: string
                        format: date-time
                      visit_start:
                        type: string
                        format: date-time
                      visit_end:
                        type: string
                        format: date-time
                      stage:
                        type: string
                      visit-type:
                        type: string
                      payment:
                        type: object
                        properties:
                          payment_id:
                            type: string
                            nullable: true
                          payment_status:
                            type: string
                            nullable: true
                          amount:
                            type: number
                            nullable: true
                      prescription_id:
                        type: string
                      service:
                        type: object
                        properties:
                          created_at:
                            type: string
                            format: date-time
                          mode:
                            type: array
                            items:
                              type: string
                          price:
                            type: number
                            nullable: true
                          post_pay:
                            type: boolean
                          service_name:
                            type: string
                          book_ahead_days:
                            type: integer
                          appointment_type:
                            type: string
                          allow_patient_booking:
                            type: boolean
                example:
                  data:
                    aid: example_appointment_id
                    created_at: '2023-07-30T18:07:24.000Z'
                    doctor_oid: "{{doctor_id}}"
                    patient_oid: "{{patient_id}}"
                    clinic_id: "{{clinic_id}}"
                    channel: Offline
                    status: CM
                    start_time: '2023-07-24T15:41:41.000Z'
                    end_time: '2023-07-24T15:46:41.000Z'
                    visit_checkin: '2023-07-30T12:37:24.000Z'
                    visit_start: '2023-07-24T15:41:41.000Z'
                    visit_end: '2023-07-24T15:46:41.000Z'
                    stage: COMPLETED
                    visit-type: WALKIN
                    payment:
                      payment_id: null
                      payment_status: null
                      amount: null
                    prescription_id: "{{rx_id}}"
                    service:
                      created_at: '2022-01-01T00:00:00.000Z'
                      mode:
                        - in-clinic
                      price: null
                      post_pay: false
                      service_name: consultation
                      appointment_type: REGULAR
      deprecated: false
  /v2/business/doctor/appointments/{appointment_id}/cancel:
    put:
      tags:
        - Appointment API
      summary: Cancel Appointment
      description: >-

        ### Overview


        This API endpoint is used to cancel an existing appointment.


        ### Endpoint


        **URL:**
        `{{HOST}}/v2/business/appointments/cancel`  

        **Method:** PUT


        ### Request Parameters


        | Parameter | Type | Description | Required |

        | --- | --- | --- | --- |

        | appointment_id | string | Unique identifier for the appointment | Yes
        |


        ### Request Headers


        | Header | Type | Description | Required |

        | --- | --- | --- | --- |

        | Content-Type | string | `application/json` | Yes |

        ### Sample Request


        ``` bash

        curl --location --request PUT
        '{{HOST}}/appointment/{{appointment_id}}/cancel' \

        --header 'Content-Type: application/json' \

         ```
      operationId: CancelAppointment
      parameters:
        - name: appointment_id
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          headers:
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Thu, 16 Apr 2020 08:47:12 GMT
            Transfer-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: chunked
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            Server:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nginx/1.10.3 (Ubuntu)
            Vary:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Accept-Encoding
            Strict-Transport-Security:
              content:
                text/plain:
                  schema:
                    type: string
                  example: max-age=15768000
            Content-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: gzip
          content:
            application/json:
              schema:
                type: string
                example: |-
                  {
                      "data": {
                          "message": "Appointment has been cancelled",
                          "appointment_id": {{appointment_id}}
                      }
                  }
              example: |-
                {
                    "data": {
                        "message": "Appointment has been cancelled",
                        "appointment_id": {{appointment_id}}
                    }
                }
      deprecated: false
  /v2/business/appointments/patient/{patient_id}:
    get:
      tags:
        - Appointment API
      summary: Get all appointments for profile
      operationId: Getallappointmentsforprofile
      parameters:
        - name: x-api-key
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
            example: '{{x-api-key}}'
        - name: patient_id
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
      responses:
        default:
          description: ''
          headers: { }
          content:
            application/json:
              schema:
                type: string
                example: |-
                  {
                      "success": true,
                      "data": [
                          {
                          "aid": {{appointment_id}},
                          "created_at": "2023-07-30T18:07:24.000Z",
                          "doctor_id": {{doctor_id}},
                          "patient_id": {{patient_id}},
                          "clinic_id": {{clinic_id}},
                          "channel": "Offline",
                          "status": "CM",
                          "start_time": "2023-07-24T15:41:41.000Z",
                          "end_time": "2023-07-24T15:46:41.000Z",
                          "visit_checkin": "2023-07-30T12:37:24.000Z",
                          "visit_start": "2023-07-24T15:41:41.000Z",
                          "visit_end": "2023-07-24T15:46:41.000Z",
                          "stage": "COMPLETED",
                          "visit-type": "WALKIN",
                          "payment": {
                              "payment_id": null,
                              "payment_status": null,
                              "amount": null
                          },
                          "prescription_id": {{rx_id}},
                          "service": [{
                              "created_at": "2022-01-01T00:00:00.000Z",
                              "mode": [
                                  "in-clinic"
                              ],
                              "price": null,
                              "post_pay": false,
                              "service_name": "consultation",
                              "book_ahead_days": 21,
                              "appointment_type": "REGULAR",
                              "allow_patient_booking": true
                          }]
                      },
                      {
                          "aid": {{appointment_id}},
                          "created_at": "2023-07-30T18:07:24.000Z",
                          "doctor_id": {{doctor_id}},
                          "patient_id": {{patient_id}},
                          "clinic_id": {{clinic_id}},
                          "channel": "Offline",
                          "status": "CM",
                          "start_time": "2023-07-24T15:41:41.000Z",
                          "end_time": "2023-07-24T15:46:41.000Z",
                          "visit_checkin": "2023-07-30T12:37:24.000Z",
                          "visit_start": "2023-07-24T15:41:41.000Z",
                          "visit_end": "2023-07-24T15:46:41.000Z",
                          "stage": "COMPLETED",
                          "visit-type": "WALKIN",
                          "payment": {
                              "payment_id": null,
                              "payment_status": null,
                              "amount": null
                          },
                          "prescription_id": {{rx_id}},
                          "service": [{
                              "created_at": "2022-01-01T00:00:00.000Z",
                              "mode": [
                                  "in-clinic"
                              ],
                              "price": null,
                              "post_pay": false,
                              "service_name": "consultation",
                              "book_ahead_days": 21,
                              "appointment_type": "REGULAR",
                              "allow_patient_booking": true
                          }]
                      }
                      ]
                  }
              example: |-
                {
                    "success": true,
                    "data": [
                        {
                        "aid": {{appointment_id}},
                        "created_at": "2023-07-30T18:07:24.000Z",
                        "doctor_id": {{doctor_id}},
                        "patient_id": {{patient_id}},
                        "clinic_id": {{clinic_id}},
                        "channel": "Offline",
                        "status": "CM",
                        "start_time": "2023-07-24T15:41:41.000Z",
                        "end_time": "2023-07-24T15:46:41.000Z",
                        "visit_checkin": "2023-07-30T12:37:24.000Z",
                        "visit_start": "2023-07-24T15:41:41.000Z",
                        "visit_end": "2023-07-24T15:46:41.000Z",
                        "stage": "COMPLETED",
                        "visit-type": "WALKIN",
                        "payment": {
                            "payment_id": null,
                            "payment_status": null,
                            "amount": null
                        },
                        "prescription_id": {{rx_id}},
                        "service": [{
                            "created_at": "2022-01-01T00:00:00.000Z",
                            "mode": [
                                "in-clinic"
                            ],
                            "price": null,
                            "post_pay": false,
                            "service_name": "consultation",
                            "book_ahead_days": 21,
                            "appointment_type": "REGULAR",
                            "allow_patient_booking": true
                        }]
                    },
                    {
                        "aid": {{appointment_id}},
                        "created_at": "2023-07-30T18:07:24.000Z",
                        "doctor_id": {{doctor_id}},
                        "patient_id": {{patient_id}},
                        "clinic_id": {{clinic_id}},
                        "channel": "Offline",
                        "status": "CM",
                        "start_time": "2023-07-24T15:41:41.000Z",
                        "end_time": "2023-07-24T15:46:41.000Z",
                        "visit_checkin": "2023-07-30T12:37:24.000Z",
                        "visit_start": "2023-07-24T15:41:41.000Z",
                        "visit_end": "2023-07-24T15:46:41.000Z",
                        "stage": "COMPLETED",
                        "visit-type": "WALKIN",
                        "payment": {
                            "payment_id": null,
                            "payment_status": null,
                            "amount": null
                        },
                        "prescription_id": {{rx_id}},
                        "service": [{
                            "created_at": "2022-01-01T00:00:00.000Z",
                            "mode": [
                                "in-clinic"
                            ],
                            "price": null,
                            "post_pay": false,
                            "service_name": "consultation",
                            "appointment_type": "REGULAR"
                        }]
                    }
                    ]
                }
      deprecated: false
  /v1/business/prescription/{rx_id}:
    get:
      tags:
        - Prescription API
      summary: Get Prescription details
      description: >-
        This API can be used to fetch details of a prescription created by
        doctor.


        **Response Parameters**


        | Parameter | Type | Description |

        | --- | --- | --- |

        | data | object | Response data object |

        | data.rx_id | string | Prescription ID |

        | data.visit_id | string | Appointment ID |

        | data.created_at | datetime | Timestamp when the prescription was
        created |

        | data.doctor | object | Object containing doctor details |

        | data.doctor.id | string | Doctor ID |

        | data.patient | object | Object containing patient details |

        | data.patient.id | string | Patient ID |

        | data.selected_clinic | string | Selected clinic ID |

        | data.rx_url | string | URL to the prescription |

        | data.visit_name | string | Name of the visit |

        | data.rx_entities | object | Object containing prescription entities |

        | data.rx_entities.symptoms | array | Array of symptoms |

        | data.rx_entities.symptoms\[\].id | string | Symptom ID |

        | data.rx_entities.symptoms\[\].name | string | Name of the symptom |

        | data.rx_entities.symptoms\[\].properties | object | Object containing
        properties of the symptom |

        | data.rx_entities.symptoms\[\].properties.since | string | Duration
        since the symptom started |

        | data.rx_entities.symptoms\[\].properties.severity | string | Severity
        of the symptom |

        | data.rx_entities.symptoms\[\].properties.abc | string | Additional
        property of the symptom |

        | data.rx_entities.diagnosis | array | Array of diagnoses |

        | data.rx_entities.diagnosis\[\].id | string | Diagnosis ID |

        | data.rx_entities.diagnosis\[\].name | string | Name of the diagnosis |

        | data.rx_entities.medications | array | Array of medications |

        | data.rx_entities.medications\[\].name | string | Name of the
        medication |

        | data.rx_entities.medications\[\].id | string | Medication ID |

        | data.rx_entities.medications\[\].dosage_form | string | Dosage form of
        the medication |

        | data.rx_entities.medications\[\].frequency | string | Frequency of the
        medication |

        | data.rx_entities.medications\[\].duration | string | Duration for
        which the medication should be taken |

        | data.rx_entities.medications\[\].timing | string | Timing of the
        medication |

        | data.rx_entities.medications\[\].instruction | string | Instruction
        for taking the medication |

        | data.rx_entities.medications\[\].dose | string | Dose of the
        medication |

        | data.rx_entities.medications\[\].generic_name | string | Generic name
        of the medication |

        | data.rx_entities.medications\[\].tapering_dose | array | Array of
        tapering doses for the medication |

        | data.rx_entities.labTests | array | Array of lab tests |

        | data.rx_entities.labTests\[\].id | string | Lab test ID |

        | data.rx_entities.labTests\[\].name | string | Name of the lab test |

        | data.rx_entities.labTests\[\].partner_id | string | Partner ID for the
        lab test |

        | data.rx_entities.labTests\[\].remark | string | Remark for the lab
        test |


        **Status codes**


        • 200: Success  

        • 403: Forbidden  

        • 404: Rx id/Business data missing  

        • 500: Wrong API URL/Wrong JSON request/ Something went wrong
      operationId: GetPrescriptiondetails
      parameters:
        - name: x-api-key
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
            example: '{{x-api-key}}'
        - name: rx_id
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          headers:
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Sun, 12 Apr 2020 11:09:57 GMT
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: '377'
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            Server:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nginx/1.10.3 (Ubuntu)
            Vary:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Cookie, Accept-Encoding
            Content-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: gzip
            Strict-Transport-Security:
              content:
                text/plain:
                  schema:
                    type: string
                  example: max-age=15768000
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      rx_id:
                        type: string
                        example: "{{rx_id}}"
                      visit_id:
                        type: string
                        example: "{{appointment_id}}"
                      created_at:
                        type: string
                        format: date-time
                        example: "2024-03-08T05:50:37.059Z"
                      doctor:
                        type: object
                        properties:
                          id:
                            type: string
                            example: "{{doctor_id}}"
                      patient:
                        type: object
                        properties:
                          id:
                            type: string
                            example: "{{patient_id}}"
                      selected_clinic:
                        type: string
                        example: "{{clinic_id}}"
                      rx_url:
                        type: string
                        example: "url"
                      visit_name:
                        type: string
                        example: "Febrile illness, Dengue L"
                      rx_entities:
                        type: object
                        properties:
                          symptoms:
                            type: array
                            items:
                              type: object
                              properties:
                                id:
                                  type: string
                                  example: "id-123"
                                name:
                                  type: string
                                  example: "Fever With Chills"
                                properties:
                                  type: object
                                  properties:
                                    since:
                                      type: string
                                      example: "5 days"
                                    severity:
                                      type: string
                                      example: "high"
                                    abc:
                                      type: string
                                      example: "xyz"
                          diagnosis:
                            type: array
                            items:
                              type: object
                              properties:
                                id:
                                  type: string
                                  example: "id-2345"
                                name:
                                  type: string
                                  example: "Febrile illness"
                          medications:
                            type: array
                            items:
                              type: object
                              properties:
                                name:
                                  type: string
                                  example: "Dolo 650"
                                id:
                                  type: string
                                  example: "id-678"
                                dosage_form:
                                  type: string
                                  example: "tablet"
                                frequency:
                                  type: string
                                  example: "1-1-1"
                                duration:
                                  type: string
                                  example: "5 Days"
                                timing:
                                  type: string
                                  example: "After Meal"
                                instruction:
                                  type: string
                                  example: "drink with water"
                                dose:
                                  type: string
                                  example: "1 tablet"
                                generic_name:
                                  type: string
                                  example: "Paracetamol (650mg)"
                                tapering_dose:
                                  type: array
                                  items: { }
                          labTests:
                            type: array
                            items:
                              type: object
                              properties:
                                id:
                                  type: string
                                  example: "id-888"
                                name:
                                  type: string
                                  example: "Complete Blood Count (CBC)"
                                partner_id:
                                  type: string
                                  example: "MP0101"
                                remark:
                                  type: string
                                  nullable: true
                                  example: null
                          speciality:
                            type: object
                            properties:
                              opthal_readings:
                                type: object
                                properties:
                                  refraction:
                                    type: object
                                    properties:
                                      rightEye:
                                        type: object
                                        properties:
                                          spherical:
                                            type: number
                                            example: -2.25
                                          cylindrical:
                                            type: number
                                            example: -0.75
                                          axis:
                                            type: integer
                                            example: 180
                                          addPower:
                                            type: number
                                            example: 2.00
                                      leftEye:
                                        type: object
                                        properties:
                                          spherical:
                                            type: number
                                            example: -2.00
                                          cylindrical:
                                            type: number
                                            example: -0.50
                                          axis:
                                            type: integer
                                            example: 175
                                          addPower:
                                            type: number
                                            example: 2.00
                                  ipd:
                                    type: object
                                    properties:
                                      distance:
                                        type: integer
                                        example: 62
                                      near:
                                        type: integer
                                        example: 59
                                  lensAdvised:
                                    type: object
                                    properties:
                                      type:
                                        type: string
                                        example: "Progressive"
                                      material:
                                        type: string
                                        example: "Polycarbonate"
                                      coatings:
                                        type: array
                                        items:
                                          type: string
                                        example: [ "Anti-reflective", "Blue light filter" ]
                                  glassAdvised:
                                    type: object
                                    properties:
                                      frame:
                                        type: string
                                        example: "Metal"
                                      style:
                                        type: string
                                        example: "Full rim"
                                      size:
                                        type: string
                                        example: "Medium"

      deprecated: false
  /webhook/appointment:
    post:
      tags:
        - Appointment Webhooks
      summary: Appointment
      description: >-

        When an appointment is created/modified or completed, a webhook event is sent to registered
        webhooks with details about the appointment, including the appointment
        ID, status, doctor ID, patient ID, and event type.


        **Example Webhook Event Payload**


        ``` json

        {
          "event_type": "appointment",
          "timestamp": "2023-07-30T18:07:24.000Z",
          "partition_id": "{{appointment_id}}-{{patient_id}}",
          "data": {
            "appointment_id": "{{appointment_id}}",
            "doctor_id": "{{doctor_id}}",
            "patient_id": "{{patient_id}}",
            "clinic_id": "{{clinic_id}}",
            "status": "BK",
            "action": "created",
            "created_at": "2023-07-30T18:07:24.000Z",
            "modified_at": "2023-07-30T18:07:24.000Z",
            "client_meta": {
              "visit_id": "{{visit_id}}"
            }
          }
        }

         ```

        **Field Definitions**


        • **event**: string - The type of resource for which event is generated. For appointments, this
        will be `appointment`.


        • **data**: object - Contains detailed information about the appointment
        event.


        • **appointment_id**: string - Unique identifier for the appointment.


        • **doctor_id**: string - Unique identifier for the doctor.


        • **patient_id**: string - Unique identifier for the patient.


        • **status**: string - Status of the appointment. Possible values can be 
        
          - "BK" (Booked),
        
          - "OG" (Ongoing),
        
          - "CM" (Completed with Prescription),
        
          - "CMNP" (Completed without Prescription),
        
          - "CN" (Cancelled).
        
        
        • **action**: string - Current action for the appointment. Possible values can be 

            - created
        
            - modified
        
            - completed


        • **timestamp**: string (ISO 8601) - The date and time when the event
        occurred.


        **Example Webhook Request**


        **Endpoint:**
        [https://your-registered-webhook-url.com](https://your-registered-webhook-url.com)


        **Method:** POST
      operationId: AppointmentConfirmed
      parameters: [ ]
      requestBody:
        description: ''
        content:
          text/plain:
            schema:
              type: string
              example: |-
                {
                  "event_type": "appointment",
                  "timestamp" : "2023-07-30T18:07:24.000Z",
                  "partition_id" : "{{appointment_id}}-{{patient_id}}",
                  "data": {
                    "appointment_id": {{appointment_id}},
                    "doctor_id":{{doctor_id}},
                    "patient_id": {{patient_id}},
                    "clinic_id": {{clinic_id}},
                    "status" : "BK",
                    "action" : "created",
                    "created_at" : "2023-07-30T18:07:24.000Z",
                    "modified_at" : "2023-07-30T18:07:24.000Z"
                    "client_meta" : {
                        "visit_id" : {{visit_id}}
                    }
                  }
                }

        required: true
      responses:
        '200':
          description: ''
          headers: { }
      deprecated: false
  /webhook/prescription:
    post:
      tags:
        - Prescription Webhooks
      summary: Prescription Events
      description: >-
        
        When a prescription is created or modified, a webhook event is sent to registered webhooks with details about the prescription, including the prescription ID, visit ID, doctor ID, patient ID, and event type.
        
        
        The receiver can then use the `rx_id` from webhook events to retrieve the details of a specific prescription by calling the prescription API.


        **Example Webhook Event Payload**


        ``` json

        {
          "event_type": "prescription",
          "partition_id" : "{{rx_id}}-{{patient_id}}",
          "timestamp" : "2023-07-30T18:07:24.000Z",
          "data": {
            "status" : "created",
            "action" : "created",
            "rx_id": "{{rx_id}}",
            "appointment_id": "{{appointment_id}}",
            "doctor_id": "{{doctor_id}}",
            "patient_id": "{{patient_id}}",
            "clinic_id": "{{clinic_id}}",
            "created_at" : "2023-07-30T18:07:24.000Z",
          },
          "client_meta" : { } 
        }

         ```


      operationId: Getprescriptiondetails
      parameters:
        - name: rx_id
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: ''
          headers: { }
      deprecated: false
components:
  schemas:
    AuthLoginRequest:
      title: AuthLoginRequest
      required:
        - client_id
        - client_secret
      type: object
      properties:
        client_id:
          type: string
        client_secret:
          type: string
      example:
        client_id: testing
        client_secret: 4440ffe2-07e4-3364-a162-887f7652ae5d
    AuthLogin:
      title: AuthLogin
      required:
        - access_token
      type: object
      properties:
        access_token:
          type: string
      example:
        access_token: >-
          eyJhbGciOiJIUzI1NiIsInR5cCI010101.eyJleHAiOjE3MjMxMTE3MDYsImlhdCI6MTcyMzEwOTkwNiwiYy1pZCI6InRlc3RpbmcifQ.RqiPmu983VyW8jm1RFW-UrW3m14ZezKqXfBzkKl80
    200Success:
      title: 200Success
      required:
        - access_token
      type: object
      properties:
        access_token:
          type: string
      example:
        access_token: >-
          eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3MjMxMTE3MDYsImlhdCI6MTcyMzEwOTkwNiwiYy1pZCI6InRlc3RpbmcifQ.RqiPmu983VyW8jm1RFW-UrW3m14ZezKqXfBTkElsoPG
    200OK:
      title: 200OK
      required:
        - data
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Data'
      example:
        data:
          patient_oid: '123456789'
          profile:
            id: '123456789'
            created_at: '2024-06-12T21:55:51.593Z'
            updated_at: '2024-06-17T09:52:55.257Z'
    Data:
      title: Data
      required:
        - patient_oid
        - profile
      type: object
      properties:
        patient_oid:
          type: string
        profile:
          $ref: '#/components/schemas/Profile'
      example:
        patient_oid: '123456789'
        profile:
          id: '123456789'
          created_at: '2024-06-12T21:55:51.593Z'
          updated_at: '2024-06-17T09:52:55.257Z'
    Profile:
      title: Profile
      required:
        - id
        - created_at
        - updated_at
      type: object
      properties:
        id:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
      example:
        id: '123456789'
        created_at: '2024-06-12T21:55:51.593Z'
        updated_at: '2024-06-17T09:52:55.257Z'
    Error:
      title: Error
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      example:
        code: NOT_ALLOWED
        message: You are not allowed to add resource
    403ForbiddenBusinessPatientDetailsMissing1:
      title: 403ForbiddenBusinessPatientDetailsMissing1
      required:
        - data
        - error
      type: object
      properties:
        data:
          type: object
        error:
          $ref: '#/components/schemas/Error'
      example:
        data: { }
        error:
          code: NOT_ALLOWED
          message: You are not allowed to add resource
    500WrongAPIURLTokenmismatchedWrongJSONrequest.1:
      title: 500WrongAPIURLTokenmismatchedWrongJSONrequest.1
      required:
        - data
        - error
      type: object
      properties:
        data:
          type: object
        error:
          $ref: '#/components/schemas/Error'
      example:
        data: { }
        error:
          code: INVALID_DATA
          message: Data entered in incorrect
    200OK1:
      title: 200OK1
      required:
        - data
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Data1'
      example:
        data:
          patient_oid: '123456789'
          name: Test Patient
          last_visit: '2024-06-06T10:56:50.468Z'
          clinic_id: '12345678'
          patient_profile:
            patient_oid: '123456789'
            first_name: Test
            middle_name: ''
            last_name: Patient
            dob: '1984-11-11'
            email: ekademo@gmail.com
            gen: M
            mobile: '+919999999999'
            created_at: '2021-03-19T13:15:26.318Z'
            address:
              city: Bangalore
              line1: ABC
              line2: XYZ
              pincode: 560049
              state: Karnataka
              country: India
              district: Bangalore Urban
            metadata:
              blood_group: AB+
              aadhar_number: '12345'
              notes: Has a history of HTN
              father_name: Test Father
    Data1:
      title: Data1
      required:
        - patient_oid
        - name
        - last_visit
        - clinic_id
        - patient_profile
      type: object
      properties:
        patient_oid:
          type: string
        name:
          type: string
        last_visit:
          type: string
        clinic_id:
          type: string
        patient_profile:
          $ref: '#/components/schemas/PatientProfile'
      example:
        patient_oid: '123456789'
        name: Test Patient
        last_visit: '2024-06-06T10:56:50.468Z'
        clinic_id: '12345678'
        patient_profile:
          patient_oid: '123456789'
          first_name: Test
          middle_name: ''
          last_name: Patient
          dob: '1984-11-11'
          email: ekademo@gmail.com
          gen: M
          mobile: '+919999999999'
          created_at: '2021-03-19T13:15:26.318Z'
          address:
            city: Bangalore
            line1: ABC
            line2: XYZ
            pincode: 560049
            state: Karnataka
            country: India
            district: Bangalore Urban
          metadata:
            blood_group: AB+
            aadhar_number: '12345'
            notes: Has a history of HTN
            father_name: Test Father
    PatientProfile:
      title: PatientProfile
      required:
        - patient_oid
        - first_name
        - middle_name
        - last_name
        - dob
        - email
        - gen
        - mobile
        - created_at
        - address
        - metadata
      type: object
      properties:
        patient_oid:
          type: string
        first_name:
          type: string
        middle_name:
          type: string
        last_name:
          type: string
        dob:
          type: string
        email:
          type: string
        gen:
          type: string
        mobile:
          type: string
        created_at:
          type: string
        address:
          $ref: '#/components/schemas/Address'
        metadata:
          $ref: '#/components/schemas/Metadata'
      example:
        patient_oid: '123456789'
        first_name: Test
        middle_name: ''
        last_name: Patient
        dob: '1984-11-11'
        email: ekademo@gmail.com
        gen: M
        mobile: '+919999999999'
        created_at: '2021-03-19T13:15:26.318Z'
        address:
          city: Bangalore
          line1: ABC
          line2: XYZ
          pincode: 560049
          state: Karnataka
          country: India
          district: Bangalore Urban
        metadata:
          blood_group: AB+
          aadhar_number: '12345'
          notes: Has a history of HTN
          father_name: Test Father
    Address:
      title: Address
      required:
        - city
        - line1
        - line2
        - pincode
        - state
        - country
        - district
      type: object
      properties:
        city:
          type: string
        line1:
          type: string
        line2:
          type: string
        pincode:
          type: integer
          format: int32
        state:
          type: string
        country:
          type: string
        district:
          type: string
      example:
        city: Bangalore
        line1: ABC
        line2: XYZ
        pincode: 560049
        state: Karnataka
        country: India
        district: Bangalore Urban
    Metadata:
      title: Metadata
      required:
        - blood_group
        - aadhar_number
        - notes
        - father_name
      type: object
      properties:
        blood_group:
          type: string
        aadhar_number:
          type: string
        notes:
          type: string
        father_name:
          type: string
      example:
        blood_group: AB+
        aadhar_number: '12345'
        notes: Has a history of HTN
        father_name: Test Father
    200OK2:
      title: 200OK2
      required:
        - data
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Data2'
      example:
        data:
          patients:
            - patient_oid: '123456789'
              name: Test Patient
              last_visit: '2024-06-06T10:56:50.468Z'
              clinic_id: '12345678'
              patient_profile:
                patient_oid: '123456789'
                first_name: Test
                middle_name: ''
                last_name: Patient
                dob: '1984-11-11'
                email: ekademo@gmail.com
                gen: M
                mobile: '+919999999999'
                created_at: '2021-03-19T13:15:26.318Z'
            - patient_oid: '234567890'
              name: Test PT 2
              last_visit: null
              is_recent: false
              clinic_id: null
              patient_profile:
                first_name: Test
                middle_name: PT
                last_name: '2'
                patient_oid: '234567890'
                email: demo_test@eka.care
                gen: M
                mobile: '+91999999999'
                dob: '1991-11-11'
                created_at: 2021-03-19T13:15:26318Z
    Data2:
      title: Data2
      required:
        - patients
      type: object
      properties:
        patients:
          type: array
          items:
            $ref: '#/components/schemas/Patient'
          description: ''
      example:
        patients:
          - patient_oid: '123456789'
            name: Test Patient
            last_visit: '2024-06-06T10:56:50.468Z'
            clinic_id: '12345678'
            patient_profile:
              patient_oid: '123456789'
              first_name: Test
              middle_name: ''
              last_name: Patient
              dob: '1984-11-11'
              email: ekademo@gmail.com
              gen: M
              mobile: '+919999999999'
              created_at: '2021-03-19T13:15:26.318Z'
          - patient_oid: '234567890'
            name: Test PT 2
            last_visit: null
            is_recent: false
            clinic_id: null
            patient_profile:
              first_name: Test
              middle_name: PT
              last_name: '2'
              patient_oid: '234567890'
              email: demo_test@eka.care
              gen: M
              mobile: '+91999999999'
              dob: '1991-11-11'
              created_at: 2021-03-19T13:15:26318Z
    Patient:
      title: Patient
      required:
        - patient_oid
        - name
        - last_visit
        - clinic_id
        - patient_profile
      type: object
      properties:
        patient_oid:
          type: string
        name:
          type: string
        last_visit:
          type: string
          nullable: true
        clinic_id:
          type: string
          nullable: true
        patient_profile:
          $ref: '#/components/schemas/PatientProfile1'
        is_recent:
          type: boolean
      example:
        patient_oid: '123456789'
        name: Test Patient
        last_visit: '2024-06-06T10:56:50.468Z'
        clinic_id: '12345678'
        patient_profile:
          patient_oid: '123456789'
          first_name: Test
          middle_name: ''
          last_name: Patient
          dob: '1984-11-11'
          email: ekademo@gmail.com
          gen: M
          mobile: '+919999999999'
          created_at: '2021-03-19T13:15:26.318Z'
    PatientProfile1:
      title: PatientProfile1
      required:
        - patient_oid
        - first_name
        - middle_name
        - last_name
        - dob
        - email
        - gen
        - mobile
        - created_at
      type: object
      properties:
        patient_oid:
          type: string
        first_name:
          type: string
        middle_name:
          type: string
        last_name:
          type: string
        dob:
          type: string
        email:
          type: string
        gen:
          type: string
        mobile:
          type: string
        created_at:
          type: string
      example:
        patient_oid: '123456789'
        first_name: Test
        middle_name: ''
        last_name: Patient
        dob: '1984-11-11'
        email: ekademo@gmail.com
        gen: M
        mobile: '+919999999999'
        created_at: '2021-03-19T13:15:26.318Z'
    200OK3:
      title: 200OK3
      required:
        - data
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Data3'
      example:
        data:
          patients:
            - oid: '123456789'
              name: Test Patient
              last_visit: '2024-06-06T10:56:50.468Z'
              clinic_id: '12345678'
              patient_profile:
                oid: '123456789'
                first_name: Test
                middle_name: ''
                last_name: Patient
                dob: '1984-11-11'
                email: ekademo@gmail.com
                gen: M
                mobile: '+919999999999'
                created_at: '2021-03-19T13:15:26.318Z'
            - oid: '234567890'
              name: Test PT 2
              last_visit: null
              is_recent: false
              clinic_id: null
              patient_profile:
                first_name: Test
                middle_name: PT
                last_name: '2'
                oid: '234567890'
                email: demo_test@eka.care
                gen: M
                mobile: '+91999999999'
                dob: '1991-11-11'
                created_at: 2021-03-19T13:15:26318Z
    Data3:
      title: Data3
      required:
        - patients
      type: object
      properties:
        patients:
          type: array
          items:
            $ref: '#/components/schemas/Patient1'
          description: ''
      example:
        patients:
          - oid: '123456789'
            name: Test Patient
            last_visit: '2024-06-06T10:56:50.468Z'
            clinic_id: '12345678'
            patient_profile:
              oid: '123456789'
              first_name: Test
              middle_name: ''
              last_name: Patient
              dob: '1984-11-11'
              email: ekademo@gmail.com
              gen: M
              mobile: '+919999999999'
              created_at: '2021-03-19T13:15:26.318Z'
          - oid: '234567890'
            name: Test PT 2
            last_visit: null
            is_recent: false
            clinic_id: null
            patient_profile:
              first_name: Test
              middle_name: PT
              last_name: '2'
              oid: '234567890'
              email: demo_test@eka.care
              gen: M
              mobile: '+91999999999'
              dob: '1991-11-11'
              created_at: 2021-03-19T13:15:26318Z
    Patient1:
      title: Patient1
      required:
        - oid
        - name
        - last_visit
        - clinic_id
        - patient_profile
      type: object
      properties:
        oid:
          type: string
        name:
          type: string
        last_visit:
          type: string
          nullable: true
        clinic_id:
          type: string
          nullable: true
        patient_profile:
          $ref: '#/components/schemas/PatientProfile2'
        is_recent:
          type: boolean
      example:
        oid: '123456789'
        name: Test Patient
        last_visit: '2024-06-06T10:56:50.468Z'
        clinic_id: '12345678'
        patient_profile:
          oid: '123456789'
          first_name: Test
          middle_name: ''
          last_name: Patient
          dob: '1984-11-11'
          email: ekademo@gmail.com
          gen: M
          mobile: '+919999999999'
          created_at: '2021-03-19T13:15:26.318Z'
    PatientProfile2:
      title: PatientProfile2
      required:
        - oid
        - first_name
        - middle_name
        - last_name
        - dob
        - email
        - gen
        - mobile
        - created_at
      type: object
      properties:
        oid:
          type: string
        first_name:
          type: string
        middle_name:
          type: string
        last_name:
          type: string
        dob:
          type: string
        email:
          type: string
        gen:
          type: string
        mobile:
          type: string
        created_at:
          type: string
      example:
        oid: '123456789'
        first_name: Test
        middle_name: ''
        last_name: Patient
        dob: '1984-11-11'
        email: ekademo@gmail.com
        gen: M
        mobile: '+919999999999'
        created_at: '2021-03-19T13:15:26.318Z'
    UpdatePatientDetailsAPIRequest:
      title: UpdatePatientDetailsAPIRequest
      required:
        - firstName
        - middleName
        - lastName
        - mobile
        - email
        - address
        - metadata
      type: object
      properties:
        firstName:
          type: string
        middleName:
          type: string
        lastName:
          type: string
        mobile:
          type: string
        email:
          type: string
        address:
          $ref: '#/components/schemas/Address1'
        metadata:
          $ref: '#/components/schemas/Metadata1'
      example:
        firstName: John
        middleName: Doe
        lastName: NewLastName
        mobile: '+91999999999'
        email: john.doe@example.com
        address:
          city: Bangalore
          line1: ABC
          line2: XYZ
          pincode: 560049
          state: Karnataka
          country: India
        metadata:
          blood_group: AB+
          aadhar_number: '12345'
    Address1:
      title: Address1
      required:
        - city
        - line1
        - line2
        - pincode
        - state
        - country
      type: object
      properties:
        city:
          type: string
        line1:
          type: string
        line2:
          type: string
        pincode:
          type: integer
          format: int32
        state:
          type: string
        country:
          type: string
      example:
        city: Bangalore
        line1: ABC
        line2: XYZ
        pincode: 560049
        state: Karnataka
        country: India
    Metadata1:
      title: Metadata1
      required:
        - blood_group
        - aadhar_number
      type: object
      properties:
        blood_group:
          type: string
        aadhar_number:
          type: string
      example:
        blood_group: AB+
        aadhar_number: '12345'
    200-Success1:
      title: 200-Success1
      required:
        - patientId
      type: object
      properties:
        patientId:
          type: string
      example:
        patientId: '1234567890'
    500patientIdlabPatientIdismissing:
      title: 500patientIdlabPatientIdismissing
      required:
        - message
        - code
      type: object
      properties:
        message:
          type: string
        code:
          type: integer
          format: int32
      example:
        message: Please check data.
        code: 500
    200OK4:
      title: 200OK4
      required:
        - id
        - profile
      type: object
      properties:
        id:
          type: string
        profile:
          $ref: '#/components/schemas/Profile1'
      example:
        id: '1234567890'
        profile:
          personal:
            first_name: doctor
            middle_name: ''
            last_name: doctor
            dob: ''
            gender: M
          professional:
            active: true
            about: doctor doctor is a Cardiologist with 43 years of experience.
            language:
              - code: en
                language: English
            degree:
              - name: MD
                branch_name: ''
                college_name: ''
                start_year: ''
                end_year: ''
            major_speciality:
              name: Cardiologist
              code: CA
            speciality:
              - name: General Physician
              - name: Diabetologist
              - name: Allergy Specialist
            clinics:
              - id: '1234567899876'
                name: Vagus Hospital & Health Services
                contacts:
                  - name: Phone
                    number: '+91999999999'
                address:
                  line1: >-
                    H No -122/a,, Pocket 2 back side of Yamaha 2 wheeler
                    showroom., Pocket 2, Gate No :-2, nearest to Homeopathy
                    clinic.
                  city: Delhi
                  country: India
                  state: Delhi
                  pin: '110085'
            default_clinic: '1234567899876'
    Profile1:
      title: Profile1
      required:
        - personal
        - professional
      type: object
      properties:
        personal:
          $ref: '#/components/schemas/Personal'
        professional:
          $ref: '#/components/schemas/Professional'
      example:
        personal:
          first_name: doctor
          middle_name: ''
          last_name: doctor
          dob: ''
          gender: M
        professional:
          active: true
          about: doctor doctor is a Cardiologist with 43 years of experience.
          language:
            - code: en
              language: English
          degree:
            - name: MD
              branch_name: ''
              college_name: ''
              start_year: ''
              end_year: ''
          major_speciality:
            name: Cardiologist
            code: CA
          speciality:
            - name: General Physician
            - name: Diabetologist
            - name: Allergy Specialist
          clinics:
            - id: '1234567899876'
              name: Vagus Hospital & Health Services
              contacts:
                - name: Phone
                  number: '+91999999999'
              address:
                line1: >-
                  H No -122/a,, Pocket 2 back side of Yamaha 2 wheeler
                  showroom., Pocket 2, Gate No :-2, nearest to Homeopathy
                  clinic.
                city: Delhi
                country: India
                state: Delhi
                pin: '110085'
          default_clinic: '1234567899876'
    Personal:
      title: Personal
      required:
        - first_name
        - middle_name
        - last_name
        - dob
        - gender
      type: object
      properties:
        first_name:
          type: string
        middle_name:
          type: string
        last_name:
          type: string
        dob:
          type: string
        gender:
          type: string
      example:
        first_name: doctor
        middle_name: ''
        last_name: doctor
        dob: ''
        gender: M
    Professional:
      title: Professional
      required:
        - active
        - about
        - language
        - degree
        - major_speciality
        - speciality
        - clinics
        - default_clinic
      type: object
      properties:
        active:
          type: boolean
        about:
          type: string
        language:
          type: array
          items:
            $ref: '#/components/schemas/Language'
          description: ''
        degree:
          type: array
          items:
            $ref: '#/components/schemas/Degree'
          description: ''
        major_speciality:
          $ref: '#/components/schemas/MajorSpeciality'
        speciality:
          type: array
          items:
            $ref: '#/components/schemas/Speciality'
          description: ''
        clinics:
          type: array
          items:
            $ref: '#/components/schemas/Clinic'
          description: ''
        default_clinic:
          type: string
      example:
        active: true
        about: doctor doctor is a Cardiologist with 43 years of experience.
        language:
          - code: en
            language: English
        degree:
          - name: MD
            branch_name: ''
            college_name: ''
            start_year: ''
            end_year: ''
        major_speciality:
          name: Cardiologist
          code: CA
        speciality:
          - name: General Physician
          - name: Diabetologist
          - name: Allergy Specialist
        clinics:
          - id: '1234567899876'
            name: Vagus Hospital & Health Services
            contacts:
              - name: Phone
                number: '+91999999999'
            address:
              line1: >-
                H No -122/a,, Pocket 2 back side of Yamaha 2 wheeler showroom.,
                Pocket 2, Gate No :-2, nearest to Homeopathy clinic.
              city: Delhi
              country: India
              state: Delhi
              pin: '110085'
        default_clinic: '1234567899876'
    Language:
      title: Language
      required:
        - code
        - language
      type: object
      properties:
        code:
          type: string
        language:
          type: string
      example:
        code: en
        language: English
    Degree:
      title: Degree
      required:
        - name
        - branch_name
        - college_name
        - start_year
        - end_year
      type: object
      properties:
        name:
          type: string
        branch_name:
          type: string
        college_name:
          type: string
        start_year:
          type: string
        end_year:
          type: string
      example:
        name: MD
        branch_name: ''
        college_name: ''
        start_year: ''
        end_year: ''
    MajorSpeciality:
      title: MajorSpeciality
      required:
        - name
        - code
      type: object
      properties:
        name:
          type: string
        code:
          type: string
      example:
        name: Cardiologist
        code: CA
    Speciality:
      title: Speciality
      required:
        - name
      type: object
      properties:
        name:
          type: string
      example:
        name: General Physician
    Clinic:
      title: Clinic
      required:
        - id
        - name
        - contacts
        - address
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        contacts:
          type: array
          items:
            $ref: '#/components/schemas/Contact'
          description: ''
        address:
          $ref: '#/components/schemas/Address2'
      example:
        id: '1234567899876'
        name: Vagus Hospital & Health Services
        contacts:
          - name: Phone
            number: '+91999999999'
        address:
          line1: >-
            H No -122/a,, Pocket 2 back side of Yamaha 2 wheeler showroom.,
            Pocket 2, Gate No :-2, nearest to Homeopathy clinic.
          city: Delhi
          country: India
          state: Delhi
          pin: '110085'
    Contact:
      title: Contact
      required:
        - name
        - number
      type: object
      properties:
        name:
          type: string
        number:
          type: string
      example:
        name: Phone
        number: '+91999999999'
    Address2:
      title: Address2
      required:
        - line1
        - city
        - country
        - state
        - pin
      type: object
      properties:
        line1:
          type: string
        city:
          type: string
        country:
          type: string
        state:
          type: string
        pin:
          type: string
      example:
        line1: >-
          H No -122/a,, Pocket 2 back side of Yamaha 2 wheeler showroom., Pocket
          2, Gate No :-2, nearest to Homeopathy clinic.
        city: Delhi
        country: India
        state: Delhi
        pin: '110085'
    Err:
      title: Err
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      example:
        code: DOCTOR_DATA_INVALID
        message: Please enter valid doctor data
    403ForbiddenBusinessPatientDetailsMissing11:
      title: 403ForbiddenBusinessPatientDetailsMissing11
      required:
        - data
        - err
      type: object
      properties:
        data:
          type: object
        err:
          $ref: '#/components/schemas/Err'
      example:
        data: { }
        err:
          code: DOCTOR_DATA_INVALID
          message: Please enter valid doctor data
    500WrongAPIURLTokenmismatchedWrongJSONrequest.11:
      title: 500WrongAPIURLTokenmismatchedWrongJSONrequest.11
      required:
        - data
        - err
      type: object
      properties:
        data:
          type: object
        err:
          $ref: '#/components/schemas/Err'
      example:
        data: { }
        err:
          code: INVALID_DATA
          message: Data entered in incorrect
    400BadRequest1:
      title: 400BadRequest1
      required:
        - data
        - error
      type: object
      properties:
        data:
          type: object
        error:
          $ref: '#/components/schemas/Error'
      example:
        data: { }
        error:
          code: INVALID_REQUEST_PARAMETERS
          message: The request contains invalid parameters
    403Forbidden1:
      title: 403Forbidden1
      required:
        - data
        - error
      type: object
      properties:
        data:
          type: object
        error:
          $ref: '#/components/schemas/Error'
      example:
        data: { }
        error:
          code: UNAUTHORIZED_ENTITY
          message: >-
            Unauthorized access. Booking appointments for business entities or
            doctors is not allowed
    Error24:
      title: Error24
      required:
        - code
        - message
        - details
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        details:
          $ref: '#/components/schemas/Details'
      example:
        code: APPOINTMENT_BOOKING_FAILED
        message: Unable to book appointment due to unavailable slots
        details:
          reason: NO_AVAILABLE_SLOTS
          doctorId: '12345'
    Details:
      title: Details
      required:
        - reason
        - doctorId
      type: object
      properties:
        reason:
          type: string
        doctorId:
          type: string
      example:
        reason: NO_AVAILABLE_SLOTS
        doctorId: '12345'
    422-UnprocessableEntity1:
      title: 422-UnprocessableEntity1
      required:
        - status
        - data
        - error
      type: object
      properties:
        status:
          type: integer
          format: int32
        data:
          type: object
        error:
          $ref: '#/components/schemas/Error24'
      example:
        status: 422
        data: { }
        error:
          code: APPOINTMENT_BOOKING_FAILED
          message: Unable to book appointment due to unavailable slots
          details:
            reason: NO_AVAILABLE_SLOTS
            doctorId: '12345'
    400BadRequest3:
      title: 400BadRequest3
      required:
        - status
        - data
        - error
      type: object
      properties:
        status:
          type: integer
          format: int32
        data:
          type: object
        error:
          $ref: '#/components/schemas/Error'
      example:
        status: 400
        data: { }
        error:
          code: INVALID_REQUEST_PARAMETERS
          message: The request contains invalid parameters
    403Forbidden3:
      title: 403Forbidden3
      required:
        - status
        - data
        - error
      type: object
      properties:
        status:
          type: integer
          format: int32
        data:
          type: object
        error:
          $ref: '#/components/schemas/Error'
      example:
        status: 403
        data: { }
        error:
          code: UNAUTHORIZED_ENTITY
          message: >-
            Unauthorized access. Booking appointments for business entities or
            doctors is not allowed
    PatientInformationUpdatedRequest:
      title: PatientInformationUpdatedRequest
      required:
        - nationalIdentityNumber
        - patient_merge
        - Patient middleName
        - optionCode
        - Patient Name
        - country code
        - wardNo
        - ethnicity
        - Patient Contact
        - Patient City
        - Patient Designation
        - labId
        - zipcode
        - Patient email
        - Patient Alternate Contact
        - ssnNumber
        - race
        - referral_id
        - Patient Address
        - Patient Dob
        - status
        - Mobile Number
        - Patient firstName
        - Insurance Details
        - Patient gender
        - workerCode
        - Patient Type
        - Patient lastName
        - state
        - Patient Age
        - Patient Id
        - nationality
        - insuranceNo
        - Patient Area
        - old_patient_id
        - old_user_det_id
        - Guarantor Details
        - org_id
        - mrn
        - passportNumber
        - Patient MRN
        - landmark
        - areaOfResidance
        - webhookId
      type: object
      properties:
        nationalIdentityNumber:
          type: string
        patient_merge:
          type: integer
          format: int32
        Patient middleName:
          type: string
        optionCode:
          type: string
        Patient Name:
          type: string
        country code:
          type: string
        wardNo:
          type: string
        ethnicity:
          type: string
        Patient Contact:
          type: string
        Patient City:
          type: string
        Patient Designation:
          type: string
        labId:
          type: integer
          format: int32
        zipcode:
          type: string
        Patient email:
          type: string
        Patient Alternate Contact:
          type: string
        ssnNumber:
          type: string
        race:
          type: string
        referral_id:
          type: string
        Patient Address:
          type: string
        Patient Dob:
          type: string
        status:
          type: string
        Mobile Number:
          type: string
        Patient firstName:
          type: string
        Insurance Details:
          type: array
          items:
            type: string
          description: ''
        Patient gender:
          type: string
        workerCode:
          type: string
        Patient Type:
          type: string
        Patient lastName:
          type: string
        state:
          type: string
        Patient Age:
          type: string
        Patient Id:
          type: integer
          format: int32
        nationality:
          type: string
        insuranceNo:
          type: string
        Patient Area:
          type: string
        old_patient_id:
          type: integer
          format: int32
        old_user_det_id:
          type: integer
          format: int32
        Guarantor Details:
          type: object
        org_id:
          type: string
        mrn:
          type: string
        passportNumber:
          type: string
        Patient MRN:
          type: string
        landmark:
          type: string
        areaOfResidance:
          type: string
        webhookId:
          type: integer
          format: int32
      example:
        nationalIdentityNumber: ''
        patient_merge: 0
        Patient middleName: ''
        optionCode: ''
        Patient Name: Dummy Patient 12
        country code: '44'
        wardNo: Angola
        ethnicity: Hispanic or Latino
        Patient Contact: ''
        Patient City: Pune
        Patient Designation: Mr.
        labId: 1336
        zipcode: '123432'
        Patient email: Test@gmail.com
        Patient Alternate Contact: '1234554321'
        ssnNumber: ''
        race: ''
        referral_id: '1665687'
        Patient Address: ''
        Patient Dob: '2022-01-01'
        status: Patient Information Update
        Mobile Number: '1234554321'
        Patient firstName: Dummy
        Insurance Details: [ ]
        Patient gender: Male
        workerCode: ''
        Patient Type: I
        Patient lastName: Patient
        state: Maharashtra
        Patient Age: 2 years
        Patient Id: 18178
        nationality: Indian
        insuranceNo: ''
        Patient Area: Baner, Pune, Maharashtra, India
        old_patient_id: 0
        old_user_det_id: 0
        Guarantor Details: { }
        org_id: '179510'
        mrn: ''
        passportNumber: ''
        Patient MRN: 11234MRN
        landmark: ''
        areaOfResidance: Pune
        webhookId: 58
  securitySchemes:
    apiKey:
      type: apiKey
      name: apikey
      in: header
security:
  - apiKey: [ ]
tags:
  - name: Auth
    description: >-
      ## **API Authentication Guide for Third Parties**


      **Overview**


      To interact with our APIs securely, you must first authenticate and obtain
      an access token. This token must be included in the headers of all
      subsequent API requests. The token is valid for 30 minutes, after which
      you will need to re-authenticate to obtain a new token. This guide will
      walk you through the necessary steps and provide tips on managing token
      expiration programmatically.


      **Step 1: Obtain an Access Token**


      The first step in interacting with our API is to authenticate using your
      client credentials. This will provide you with an access token.


      **Authentication Request**


      Make a POST request to the authentication endpoint with your client
      credentials:


      ``` bash

      curl --location '{{AUTH_HOST}}/connect-auth/v1/account/login' \

      --header 'Content-Type: application/json' \

      --data '{
          "client_id": "<client_id_assigned>",
          "client_secret": "<secret_key_assigned>"
      }'

       ```

      **Response**


      If the authentication is successful, you will receive a JSON response
      containing the access token:


      ``` json

      {
          "access_token": "eyJhbGciOiJIUzI1NiIsInR5c1KlsXVCJ9.eyJleHAiOjE3MjMxMDk1NTIsImlhdCI6MTcyMzEwNzc1MiwiYy1pZCI6Im1ldHJvcG9saXMifQ.PdxjlgB3ZK4qGPdYwqfptAaZvBsGtSjqYLSN0wp1"
      }

       ```

      The access_token is valid for 30 minutes.


      **Step 2: Use the Access Token**


      Include the access token in the `auth` header for all subsequent API
      requests. This token is essential for the API gateway to authenticate your
      requests and allow access.


      **Example API Request**


      Here’s how to include the access token in your API requests:


      ``` bash

      curl --location '{{HOST}}/api-suite/v1/any-endpoint' \

      --header 'auth:
      eyJhbGciOiJIUzI1NiIsInR5c1KlsXVCJ9.eyJleHAiOjE3MjMxMDk1NTIsImlhdCI6MTcyMzEwNzc1MiwiYy1pZCI6Im1ldHJvcG9saXMifQ.PdxjlgB3ZK4qGPdYwqfptAaZvBsGtSjqYLSN0wp1'
      \

      --header 'Content-Type: application/json'

       ```

      **Token Expiration and Renewal**


      The access token is valid for **30 minutes.** After this period, you must
      re-authenticate to obtain a new token. Failing to do so will result in
      authentication errors for your API requests.


      **Error Handling**


      If the token is expired or not included in the `auth` header, all API
      requests will return a **401 Unauthorized** status code. Ensure your
      application handles this scenario by prompting re-authentication or
      renewing the token as needed.


      **Summary**


      1\. **Authenticate:** Obtain an access token using your client
      credentials.


      2\. **Authorize:** Include the access token in the auth header for all API
      requests.


      3\. **Token Management:** Ensure the token is renewed every 30 minutes to
      maintain continuous access. Implement token renewal logic in your
      application to handle this automatically.


      4.**Error Handling:** Handle 401 Unauthorized errors by re-authenticating
      and obtaining a new token.
  - name: Patient Registration API
    description: >-
      ### Overview


      The Patient Directory API is designed to manage patient information within
      a business' directory. This API allows for searching, adding, and editing
      patient details in a specific doctor's directory. It facilitates efficient
      patient management and ensures that all necessary information is
      up-to-date and easily accessible.


      ### Main Actors


      - **Patient:** The individual whose information is being managed in the
      doctor's directory. This includes personal details, contact information,
      medical history, and other relevant data.
      
      
      ### Functionality


      1. **Search for Patients:**
      
          1. This functionality allows users to search for existing patients in a business' directory using various search criteria such as mobile number, name, etc. It helps in quickly locating patient records and retrieving relevant details.
      
      2. **Add a Patient:**
      
          1. This functionality enables the addition of new patient records to a business' directory. Users can provide necessary details such as personal information, contact details, and medical history to create a new patient profile.
      
      3. **Edit a Patient:**
      
          1. This functionality allows users to update existing patient records in a doctor's directory. Users can modify personal details, contact information, and other relevant data to ensure that the patient profile remains accurate and current.
      
      
      ### Example Endpoints


      - **Search for Patients:**
      
          - `GET {{HOST}}/v1/business/patients/search?mobile=`
      
      - **Add a Patient:**
      
          - `POST {{HOST}}/v1/business/doctor/{{doctor_id}}/patient/add`
      
      - **Edit a Patient:**
      
          - `PUT {{HOST}}/v1/business/doctor/{{doctor_id}}/patient/{{patient_id}}`
      
      
      ### Usage


      These APIs are crucial for maintaining an organized and comprehensive
      patient directory within a business' practice. They ensure that patient
      data is readily available, easily searchable, and always up-to-date, thus
      enhancing the overall efficiency of patient management.


      ### Notes


      - Ensure that all required fields are provided when adding or editing
      patient information.
      
      - Use appropriate search criteria to narrow down patient records
      effectively.
      
      - Handle sensitive patient data with care and comply with relevant privacy
      regulations.
      
      - Currently a patient can only be added in a reference to a doctor in a
      business. This lets adding the patient to business directory as well as
      searching on business level automatically.
  - name: Doctor and clinic API
    description: >-
      ### Purpose


      The Doctor and Clinic Details API serves the following main purposes:


      1. **Retrieve Doctor Profile Details:**
      
          - This API provides detailed information about a doctor's profile, including their professional background, specialties, and contact information.
      
      2. **Fetch Associated Clinic Details\[WIP\]:**
      
          - In addition to the doctor's profile, this API retrieves information about the clinics associated with the doctor. This includes clinic locations, contact details, and available services.
      
      3. **Get Clinic and Doctor Details for a Business:**  
          This API provides a comprehensive list of clinics and doctors associated with those clinics for a business, allowing for detailed information retrieval about the entire business entity.
      
      
      ### **Basic Information**


      **Endpoint 1: Get Doctor Details**


      • **URL:** {{HOST}}/v1/business/doctor/{doctor_id}


      • **Method:** GET


      **Endpoint 2: Get Clinic and Doctor Details for a Business**


      • **URL:** {{HOST}}/v1/business/entities


      • **Method:** GET


      ### Usage


      This API is intended to be used by healthcare platforms, patient
      management systems, and appointment booking systems to display
      comprehensive information about doctors and their associated clinics. By
      integrating this API, users can make informed decisions when selecting a
      healthcare provider or booking an appointment.


      ### Example Workflow


      1. **Fetch Doctor Profile:**
      
          - Retrieve detailed information about a specific doctor using their unique identifier.
      
      2. **Fetch Clinic Details:**
      
          - Retrieve details of a clinics associated with the doctor.
      
      3. **Fetch Clinic and Doctor Details for a Business:**  
          •Retrieve a list of clinics, each with associated doctors, and detailed profiles of the doctors using a single API call.
  - name: Appointment API
    description: >-
      #### Appointment API allows a business to to the following actions:


      - Search for all slots daywise for a doctor and clinic.
      
      - Book appointment on a particular slot.
      
      - Check in a patient with appointment.
      
      - Get details of an appointment.
      
      - Edit/Delete/Reschedule appointments.
      
      
      ## Workflow for Booking an Appointment for a Patient


      ### Step 1: Add Patient to Business' Directory (if not present)


      Before booking an appointment, ensure that the patient is added to the
      business' directory. Use the following API to add a patient.


      _Note: You can also create an appointment without adding patient first.
      Providing patient details while creating an appointment adds the patient
      directory too._


      **Endpoint:** `{{HOST}}/v1/business/doctor/{{doctor_id}}/patient/add`


      **Method:** POST


      ### Step 2: Search for Available Slots


      Once the patient is added, select the doctor and clinic, and search for
      the available slots for the desired dates.


      **Endpoint:**
      `{{HOST}}/v1/business/doctor/{doctor_id}/clinic/{clinic_id}/appointments/slots?start_date={{start_date}}&end_date={{end_date}}`


      **Method:** GET


      ### Step 3: Book an Appointment Slot


      After finding an available slot, book the appointment for the desired date
      and slot, including additional parameters like type of appointment and
      payment mode. The appointment will be created in this step


      **Endpoint:**
      `{{HOST}}/v2/business/doctor/{doctor_id}/appointments/slots/book`


      **Method:** POST


      ### Step 4(Optional): Check-In Patient for Appointment


      Check-in a patient for a previously created appointment using the
      appointment ID.  

      **Endpoint** :
      `{{HOST}}/v2/business/appointments/{{appointment_id}}/check-in`  

      **Method:** PUT


      ### Step 5: Get Appointment Details


      **Purpose**


      Retrieve details of a specific appointment using the appointment ID.


      **Endpoint :** `{{HOST}}/v1/business/appointments/{appointment_id}`  

      **Method:** GET


      #### Request Parameters


      - **business_id**: The unique identifier for the business.
      
      - **appointment_id**: The unique identifier for the appointment.
      
      
      ### Step 6: Edit and Reschedule Appointments


      **Purpose:** Edit and reschedule existing appointments. The current
      process to reschedule an appointment is


      1. Delete the current appointment using appointment_id
      
      2. Create a new appointment with new details/slots/timinga/
      
      
      **Cancel Endpoint:**
      `{{HOST}}/v2/business/appointments/{appointment_id}/cancel`


      **Book Endppoint:**
      `{{HOST}}/v2/business/doctor/{doctor_id}/appointments/slots/book`  

      Method:** PUT  

      **Description:** Modify details of an existing appointment or reschedule
      it to a different slot.
  - name: Prescription API
    description: >-
      The Prescription API allows a business to manage prescriptions, including
      retrieving details of a specific prescription.


      ## Workflow for Managing a Prescription


      ### Step 1: Retrieve Prescription Details


      Retrieve details of a specific prescription using the prescription ID.


      **Endpoint:** `{{HOST}}/v1/business/prescription/{{rx_id}}`


      **Method:** `GET`


      **Request Parameters:**


      - **rx_id**: The unique identifier for the prescription.
      
      
      Response


      ``` json

      {
          "data": {
              "rx_id": "rx_id",
              "visit_id": "appointment_id",
              "date": "2024-03-08T05:50:37.059Z",
              "doctor": {
                  "id": "doctor_id"
              },
              "patient": {
                  "id": "patient_id"
              },
              "selected_clinic": "clinic_id",
              "rx_url": "pdf_url",
              "visit_name": "Febrile illness, Dengue L",
              "rx_entities": {
                  "symptoms": [
                      {
                          "id": "s-1234",
                          "name": "Fever With Chills",
                          "properties": {
                              "since": "5 days",
                              "severity": "high",
                              "abc": "xyz"
                          }
                      }
                  ],
                  "diagnosis": [
                      {
                          "id": "d-1345",
                          "name": "Febrile illness"
                      }
                  ],
                  "medications": [
                      {
                          "name": "Dolo 650",
                          "id": "b-13456",
                          "dosage_form": "tablet",
                          "frequency": "1-1-1",
                          "duration": "5 Days",
                          "timing": "After Meal",
                          "instruction": "drink with water",
                          "dose": "1 tablet",
                          "generic_name": "Paracetamol (650mg)",
                          "tapering_dose": []
                      }
                  ],
                  "labTests": [
                      {
                          "id": "lp-14567",
                          "name": "Complete Blood Count (CBC)",
                          "partner_id": "MP0101",
                          "remark": null
                      }
                  ]
              }
          }
      }

       ```

      ### Field Definitions


      - **rx_id**: `string` - Unique identifier for the prescription.
      
      - **visit_id**: `string` - Unique identifier for the visit during which
      the prescription was created.
      
      - **date**: `string` (ISO 8601) - Date and time when the prescription was
      created.
      
      - **doctor**: `object` - Information about the doctor who created the
      prescription.
      
          - **id**: `string` - Unique identifier for the doctor.
      
      - **patient**: `object` - Information about the patient for whom the
      prescription was created.
      
          - **id**: `string` - Unique identifier for the patient.
      
      - **selected_clinic**: `string` - Unique identifier for the clinic where
      the prescription was created.
      
      - **rx_url**: `string` - URL to download/view the prescription PDF.
      
      - **visit_name**: `string` - Description or name of the visit.
      
      - **rx_entities**: `object` - Contains detailed information about the
      prescription entities.
      
          - **symptoms**: `array` - List of symptoms.
      
              - **id**: `string` - Unique identifier for the symptom.
      
              - **name**: `string` - Name of the symptom.
      
              - **properties**: `object` - Additional properties of the symptom.
      
                  - **since**: `string` - Duration of the symptom.
      
                  - **severity**: `string` - Severity of the symptom.
      
                  - **abc**: `string` - Other property (example).
      
          - **diagnosis**: `array` - List of diagnoses.
      
              - **id**: `string` - Unique identifier for the diagnosis.
      
              - **name**: `string` - Name of the diagnosis.
      
          - **medications**: `array` - List of medications.
      
              - **name**: `string` - Name of the medication.
      
              - **id**: `string` - Unique identifier for the medication.
      
              - **dosage_form**: `string` - Form of the dosage (e.g., tablet).
      
              - **frequency**: `string` - Frequency of taking the medication.
      
              - **duration**: `string` - Duration for taking the medication.
      
              - **timing**: `string` - Timing for taking the medication.
      
              - **instruction**: `string` - Additional instructions for taking the medication.
      
              - **dose**: `string` - Dose of the medication.
      
              - **generic_name**: `string` - Generic name of the medication.
      
              - **tapering_dose**: `array` - Tapering dose information if applicable.
      
          - **labTests**: `array` - List of lab tests.
      
              - **id**: `string` - Unique identifier for the lab test.
      
              - **name**: `string` - Name of the lab test.
      
              - **partner_id**: `string` - Identifier for the partner providing the lab test.
      
              - **remark**: `string` - Additional remarks for the lab test.
  - name: Appointment Webhooks
  - name: Prescription Webhooks
    description: >-
      A webhook event for a prescription being created would typically be a POST
      request sent to the registered webhook URL. The payload of the request
      would include the relevant details such as prescription ID, appointment
      ID, doctor ID, patient ID, and the event type.


      **Request Headers**


      ```

      Content-Type: application/json

       ```

      **Request Body**


      ``` json

      {
        "event_type": "prescription_created",
        "data": {
          "rx_id": "P-AN-AAB74FCF-52ED-537E-8032-ED69CD1D5A76",
          "appointment_id": "09779b1b-4b2a-453b-8854-2fc0af2f1d93",
          "doctor_id": "168085238706770",
          "patient_id": "170313939719215"
        }
      }

       ```

      **Field Definitions**


      • **event_type**: string - Type of the event. For this example, it is
      “prescription_created”.


      • **data**: object - Contains the details of the prescription event.


      • **rx_id**: string - Unique identifier for the prescription.


      • **appointment_id**: string - Unique identifier for the appointment
      during which the prescription was created.


      • **doctor_id**: string - Unique identifier for the doctor who created the
      prescription.


      • **patient_id**: string - Unique identifier for the patient for whom the
      prescription was created.


      This JSON payload would be sent as the body of a POST request to the
      registered webhook URL. The receiving system can then process this
      information as needed.
  - name: Patient Information Webhooks
